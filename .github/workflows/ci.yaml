name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PRODUCTION_BRANCHES: "refs/heads/main" # Space-separated list of branches that are considered production branches
  CI_BUILD_WORKFLOW: "ci-build.yaml" # Name of the workflow that should be triggered for CI builds
  RELEASE_ARTIFACT_NAME: "sap-cloud-sdk.zip" # Name of the artifact that should be downloaded from the CI build workflow

jobs:
  context:
    runs-on: ubuntu-latest
    name: Collect Context Information
    outputs:
      is-production-branch: ${{ steps.check-production-branch.outputs.IS_PRODUCTION_BRANCH }}
      head-branch-name: ${{ steps.get-head-branch-name.outputs.HEAD_BRANCH_NAME }}
    steps:
      - name: Print Github Context
        run: echo "${{ toJson(github) }}"
      - name: Check Production Branch
        id: check-production-branch
        run: |
          if [[ "$PRODUCTION_BRANCHES" =~ ( |^)${{ github.ref }}( |$) ]]; then
            echo "[Debug] '${{ github.ref }}' is a production branch"
            echo "IS_PRODUCTION_BRANCH=true" >> $GITHUB_OUTPUT
          else
            echo "[Debug] '${{ github.ref }}' is not a production branch"
            echo "IS_PRODUCTION_BRANCH=false" >> $GITHUB_OUTPUT
          fi
      - name: Get Head Branch Name
        id: get-head-branch-name
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "HEAD_BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
              echo "HEAD_BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  run-ci:
    needs: [ context ]
    runs-on: ubuntu-latest
    name: Run CI Build
    outputs:
      ci-build-run-id: ${{ steps.run-ci-build.outputs.run-id }}
    permissions:
      actions: write # needed to trigger the ci-build workflow
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run CI Build Workflow
        id: run-ci-build
        uses: ./.github/actions/run-workflow
        with:
          workflow: ${{ env.CI_BUILD_WORKFLOW }}
          workflow-ref: ${{ needs.context.outputs.head-branch-name }}
          parameters: >
            -f repository-version='${{ github.ref }}' 
            -f create-release-artifacts='${{ needs.context.outputs.is-production-branch }}' 
            -f check-blackduck='${{ needs.context.outputs.is-production-branch }}'

  deploy-snapshot:
    name: Deploy Snapshot
    if: ${{ needs.context.outputs.is-production-branch == 'true' }}
    needs: [context, run-ci]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      actions: read # needed to download the artifacts from the ci-build workflow
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: artifactory-snapshots
          server-username: ARTIFACTORY_USER # env variable for username in deploy
          server-password: ARTIFACTORY_TOKEN # env variable for token in deploy

      - name: Publish Snapshot
        run: >
          gh run download ${{ needs.run-ci.outputs.ci-build-run-id }} --name "${{ env.RELEASE_ARTIFACT_NAME }}" -d .
          
          unzip "${{ env.RELEASE_ARTIFACT_NAME }}" -d .

          cd release

          mvn
          $MVN_CLI_ARGS
          -Durl=https://common.repositories.cloud.sap/artifactory/build-snapshots-cloudsdk
          -DrepositoryId=artifactory-snapshots
          -Dmaven.install.skip=true
          -Dmaven.test.skip
          -Dmaven.compiler.showCompilationChanges
          -Dhttp.keepAlive=false
          deploy
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}

  notify-job:
    runs-on: ubuntu-latest
    needs: [ context, run-ci, deploy-snapshot ]
    if: ${{ failure() && needs.context.outputs.is-production-branch == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Notify
        run: python .pipeline/scripts/notify.py
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          WORKFLOW: ${{ github.workflow }}
          WORKFLOW_RUN_URL: https://github.com/SAP/cloud-sdk-java/actions/runs/${{ github.run_id }}
          BRANCH_NAME: ${{ github.ref_name }}
