name: "Continuous Integration"

on:
  workflow_dispatch:
    inputs:
      repository-version:
        description: "Repository Version (e.g. branch, tag, sha)"
        required: false
        default: ${{ github.ref }}
      check-tests:
        description: "Run Unit Tests"
        required: false
        type: boolean
        default: true
      check-checkstyle:
        description: "Run Checkstyle"
        required: false
        type: boolean
        default: true
      check-pmd:
        description: "Run PMD"
        required: false
        type: boolean
        default: true
      check-spotbugs:
        description: "Run Spotbugs"
        required: false
        type: boolean
        default: true
      check-codeql:
        description: "Run CodeQL"
        required: false
        type: boolean
        default: true
      check-archetypes:
        description: "Run Archetype Tests"
        required: false
        type: boolean
        default: true
      check-blackduck:
        description: "Run Black Duck"
        required: false
        type: boolean
        default: false
      create-release-artifacts:
        description: "Create Release Artifacts"
        required: false
        type: boolean
        default: false

env:
  NON_SDK_M2_CACHE_KEY: non-sdk-m2-${{ github.event.inputs.repository-version }}
  NON_SDK_M2_PATHS: |
    ~/.m2/repository/**
    !~/.m2/archetype-catalog.xml
    !~/.m2/repository/com/sap/cloud/sdk/**
  SDK_M2_CACHE_KEY: sdk-m2-${{ github.event.inputs.repository-version }}
  SDK_M2_PATHS: |
    ~/.m2/repository/com/sap/cloud/sdk/**
    ~/.m2/archetype-catalog.xml
  SDK_TARGETS_CACHE_KEY: sdk-targets-${{ github.event.inputs.repository-version }}
  SDK_TARGETS_PATHS: |
    ./**/target/**

  MVN_MULTI_THREADED_ARGS: --batch-mode --fail-at-end --show-version --threads 1C
  MVN_SINGLE_THREADED_ARGS: --batch-mode --fail-at-end --show-version --threads 1

jobs:
  check-formatting:
    runs-on: ubuntu-latest
    name: Check Formatting
    outputs:
      update-non-sdk-m2-stash: ${{ steps.stash-non-sdk-m2.outputs.stashed }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
          restore-keys: |
            non-sdk-m2-${{ github.ref }}
            non-sdk-m2

      - name: Verify Formatting
        run: |
          MAVEN_GOALS="\
          net.revelc.code.formatter:formatter-maven-plugin:validate \
          net.revelc.code:impsort-maven-plugin:check \
          com.github.ekryd.sortpom:sortpom-maven-plugin:verify"
          
          MVN_ARGS="${{ env.MVN_MULTI_THREADED_ARGS }} $MAVEN_GOALS"
          echo "[DEBUG] Running Maven with following arguments: $MVN_ARGS"
          mvn $MVN_ARGS

      - name: Stash Non SDK M2
        id: stash-non-sdk-m2
        uses: ./.github/actions/stash
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
          update-after-days: "1"

  build:
    needs: check-formatting
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}

      - name: Build SDK
        id: build-sdk
        run: |
          MVN_ARGS="${{ env.MVN_MULTI_THREADED_ARGS }} \
          install -DskipTests -DskipFormatting"
        
          if [[ "${{ github.event.inputs.create-release-artifacts }}" == "true" ]]; then
            echo "[DEBUG] Enabling JavaDoc generation to assemble release artifacts."
            
            python .pipeline/scripts/generate-javadoc-sourcepath-properties.py
            MVN_ARGS="$MVN_ARGS -Pdocs"
          fi
          
          echo "[DEBUG] Running Maven with arguments: $MVN_ARGS"
          mvn $MVN_ARGS
          
          if [[ "${{ github.event.inputs.create-release-artifacts }}" == "true" ]]; then
            VERSION=$(cat latest.json | jq -r .version)
            echo "[DEBUG] Assembling release artifacts for version '$VERSION'."
            
            python .pipeline/scripts/generate-release-artifacts.py --version $VERSION --path-prefix release
            zip -q -r sap-cloud-sdk-java.zip release
            rm -rf release
            
            echo "RELEASE_ARTIFACTS_NAME=sap-cloud-sdk-java" >> $GITHUB_OUTPUT
          else
            echo "[DEBUG] Not assembling release artifacts."
            echo "RELEASE_ARTIFACTS_NAME=" >> $GITHUB_OUTPUT
          fi

      - name: Create module-inventory
        run: |
          python ./scripts/create_module_inventory_file.py \
          --sdk-root-directory ./ \
          --output-file ./module-inventory.json \
          --script-config ./scripts/common/_maven_module/maven_module_reader_configuration.json

      - name: Verify Local Changes
        run: |
          CHANGED_FILES="$(git --no-pager diff --name-only)"
          if [[ ! -z "$CHANGED_FILES" ]]; then
              echo "There are local changes in the following files:"
              echo "$CHANGED_FILES"
              echo "Printing the git diff:"
              git --no-pager diff
              exit 1
          fi

      - name: Stash Non SDK M2
        if: ${{ needs.check-formatting.outputs.update-non-sdk-m2-stash == 'true' }}
        uses: ./.github/actions/stash
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
          force-update: true
      - name: Stash SDK M2
        uses: ./.github/actions/stash
        with:
          path: ${{ env.SDK_M2_PATHS }}
          key: ${{ env.SDK_M2_CACHE_KEY }}
          force-update: true
      - name: Stash SDK Target Directories
        uses: ./.github/actions/stash
        with:
          path: ${{ env.SDK_TARGETS_PATHS }}
          key: ${{ env.SDK_TARGETS_CACHE_KEY }}
          force-update: true
      - name: Upload Release Package
        if: ${{  github.event.inputs.create-release-artifacts == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-sdk.outputs.RELEASE_ARTIFACTS_NAME }}
          path: ${{ steps.build-sdk.outputs.RELEASE_ARTIFACTS_NAME }}.zip
          retention-days: 1

  test:
    if: ${{ github.event.inputs.check-tests == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    name: Unit Tests
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
      - name: Restore SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_M2_PATHS }}
          key: ${{ env.SDK_M2_CACHE_KEY }}
      - name: Restore SDK Target Directories
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_TARGETS_PATHS }}
          key: ${{ env.SDK_TARGETS_CACHE_KEY }}

      - name: Run Unit Tests
        run: |
          MVN_ARGS="${{ env.MVN_SINGLE_THREADED_ARGS }} \
          org.jacoco:jacoco-maven-plugin:prepare-agent surefire:test org.jacoco:jacoco-maven-plugin:report"
          
          echo "[DEBUG] Running Maven with arguments: $MVN_ARGS"          
          mvn $MVN_ARGS

      - name: Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
      - name: Coverage Report
        run: |
          python .pipeline/scripts/print-coverage.py --jacoco-report-pattern '**/target/site/jacoco/jacoco.csv'
        shell: bash

  check-checkstyle:
    if: ${{ github.event.inputs.check-checkstyle == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    name: Checkstyle
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
      - name: Restore SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_M2_PATHS }}
          key: ${{ env.SDK_M2_CACHE_KEY }}
      - name: Restore SDK Target Directories
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_TARGETS_PATHS }}
          key: ${{ env.SDK_TARGETS_CACHE_KEY }}

      - name: Run Checkstyle
        run: |
          MVN_ARGS="${{ env.MVN_MULTI_THREADED_ARGS }} \
          -DskipFormatting -Denforcer.skip -Djacoco.skip -Dmdep.analyze.skip \
          -P!build-test-modules org.apache.maven.plugins:maven-checkstyle-plugin:checkstyle"
          
          echo "[DEBUG] Running Maven with arguments: $MVN_ARGS"          
          mvn $MVN_ARGS

  check-pmd:
    if: ${{ github.event.inputs.check-pmd == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    name: PMD
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
      - name: Restore SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_M2_PATHS }}
          key: ${{ env.SDK_M2_CACHE_KEY }}
      - name: Restore SDK Target Directories
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_TARGETS_PATHS }}
          key: ${{ env.SDK_TARGETS_CACHE_KEY }}

      - name: Run PMD
        run: |
          MVN_ARGS="${{ env.MVN_MULTI_THREADED_ARGS }} \
          -DskipFormatting -Denforcer.skip -Djacoco.skip -Dmdep.analyze.skip \
          org.apache.maven.plugins:maven-pmd-plugin:pmd"
          
          echo "[DEBUG] Running Maven with arguments: $MVN_ARGS"          
          mvn $MVN_ARGS

  check-spotbugs:
    if: ${{ github.event.inputs.check-spotbugs == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    name: Spotbugs
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
      - name: Restore SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_M2_PATHS }}
          key: ${{ env.SDK_M2_CACHE_KEY }}
      - name: Restore SDK Target Directories
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_TARGETS_PATHS }}
          key: ${{ env.SDK_TARGETS_CACHE_KEY }}

      - name: Run Spotbugs
        run: |
          MVN_ARGS="${{ env.MVN_MULTI_THREADED_ARGS }} \
          -DskipFormatting -Denforcer.skip -Djacoco.skip -Dmdep.analyze.skip \
          com.github.spotbugs:spotbugs-maven-plugin:spotbugs"
          
          echo "[DEBUG] Running Maven with arguments: $MVN_ARGS"          
          mvn $MVN_ARGS

  check-codeql:
    if: ${{ github.event.inputs.check-codeql == 'true' }}
    needs: build # We depend on the Build job here to avoid downloading dependencies twice
    runs-on: ubuntu-latest
    name: CodeQL
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: "java"
          queries: security-extended

      - name: Build SDK
        run: |
          MVN_ARGS="${{ env.MVN_MULTI_THREADED_ARGS }} \
          install -Dmaven.test.skip=true -DskipFormatting -Denforcer.skip -Djacoco.skip -Dmdep.analyze.skip"
          
          echo "[DEBUG] Running Maven with arguments: $MVN_ARGS"
          mvn $MVN_ARGS

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:java"

  check-archetypes:
    if: ${{ github.event.inputs.check-archetypes == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task:
          - {
            "archetype": "spring-boot3",
            "javaVersion": 17,
            "startCommand": "mvn spring-boot:run -B",
          }
    name: Test Archetype ${{ matrix.task.archetype }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ matrix.task.javaVersion }}

      - name: Restore Non SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.NON_SDK_M2_PATHS }}
          key: ${{ env.NON_SDK_M2_CACHE_KEY }}
      - name: Restore SDK M2
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SDK_M2_PATHS }}
          key: ${{ env.SDK_M2_CACHE_KEY }}

      - name: Create Temp Director
        id: create-temp-dir
        run: |
          DIR=~/.temp/${{ matrix.task.archetype }}
          mkdir -p $DIR
          echo "DIR=$DIR" >> $GITHUB_OUTPUT

      - name: Determine Version
        id: get-version
        run: echo "VERSION=$(cat latest.json | jq -r .version)" >> $GITHUB_OUTPUT

      - name: Generate ${{ matrix.task.archetype }}
        working-directory: ${{ steps.create-temp-dir.outputs.DIR }}
        run: >
          mvn archetype:generate -B
          -DarchetypeCatalog=local
          -DarchetypeGroupId=com.sap.cloud.sdk.archetypes
          -DarchetypeArtifactId=${{ matrix.task.archetype }}
          -DarchetypeVersion=${{ steps.get-version.outputs.VERSION }}
          -DgroupId=com.sap.test
          -DartifactId=example-${{ matrix.task.archetype }}
          -Dversion=1.0-SNAPSHOT
          -Dpackage=com.sap.test
          -Dhttp.keepAlive=false

      - name: Verify ${{ matrix.task.archetype }}
        working-directory: ${{ steps.create-temp-dir.outputs.DIR }}/example-${{ matrix.task.archetype }}
        run: >
          mvn clean verify -B
          -Dhttp.keepAlive=false
          -Dmaven.test.skip=true

      - name: Test ${{ matrix.task.name }}
        working-directory: ${{ steps.create-temp-dir.outputs.DIR }}/example-${{ matrix.task.archetype }}
        run: mvn test -B -Dsurefire.logLevel='error'

      - name: Spotbugs ${{ matrix.task.archetype }}
        working-directory: ${{ steps.create-temp-dir.outputs.DIR }}/example-${{ matrix.task.archetype }}
        run: >
          mvn com.github.spotbugs:spotbugs-maven-plugin:check -B
          -pl !integration-tests
          -Dhttp.keepAlive=false
          -Dmaven.wagon.http.pool=false

      - name: Start ${{ matrix.task.archetype }}
        working-directory: ${{ steps.create-temp-dir.outputs.DIR }}/example-${{ matrix.task.archetype }}/application
        run: |
          logFilePath=log.txt
          ${{ matrix.task.startCommand }} > $logFilePath 2>&1 &
          
          if ! curl -s --retry 60 --retry-delay 3 --retry-all-errors http://127.0.0.1:8080/hello ; then
            echo "Project generated from archetype '${{ matrix.task.archetype }}' failed to start locally."
            cat $logFilePath
            exit 1
          fi
          
          if ! grep -q "I am running!" $logFilePath; then
            echo "Project generated from archetype '${{ matrix.task.archetype }}' started locally, but did not contain the expected log output."
            cat $logFilePath
            exit 1
          fi
          
          if grep -iq "caused by" $logFilePath; then
            echo "Project generated from archetype '${{ matrix.task.archetype }}' started locally, but an unexpected error occurred."
            cat $logFilePath
            exit 1
          fi

      - name: Verify .gitignore ${{ matrix.task.archetype }}
        working-directory: ${{ steps.create-temp-dir.outputs.DIR }}/example-${{ matrix.task.archetype }}
        run: |
          if [[ ! -f .gitignore ]]; then
              ls -lah
              echo "Project generated from archetype '${{ matrix.task.archetype }}' does not contain a .gitignore file."
              exit 1
          fi

  check-blackduck:
    if: ${{ github.event.inputs.check-blackduck == 'true' }}
    needs: build
    runs-on: ubuntu-latest
    name: Black Duck
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.repository-version }}
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Scan With Black Duck
        uses: ./.github/actions/scan-with-blackduck
