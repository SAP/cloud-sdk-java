name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PRODUCTION_BRANCHES: "refs/heads/main" # Space-separated list of branches that are considered production branches
  MVN_CLI_ARGS: "--batch-mode --fail-at-end --show-version --threads 1C"
  MVN_SKIP_ARGS: "-DskipFormatting -Denforcer.skip -Djacoco.skip -Dmdep.analyze.skip"

jobs:
  formatting:
    runs-on: ubuntu-latest
    name: Verify Formatting
    outputs:
      non-sdk-m2-stash-created: ${{ steps.verify-formatting.outputs.non-sdk-m2-stash-created }}
    permissions:
      actions: write # Required to eventually delete stashes
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Verify Formatting
        id: verify-formatting
        uses: ./.github/actions/verify-formatting

  context:
    runs-on: ubuntu-latest
    name: Collect Context Information
    outputs:
      is-production-branch: ${{ steps.check-production-branch.outputs.IS_PRODUCTION_BRANCH }}
    steps:
      - name: Check Production Branch
        id: check-production-branch
        run: |
          if [[ "$PRODUCTION_BRANCHES" =~ ( |^)${{ github.ref }}( |$) ]]; then
            echo "[Debug] '${{ github.ref }}' is a production branch"
            echo "IS_PRODUCTION_BRANCH=true" >> $GITHUB_OUTPUT
          else
            echo "[Debug] '${{ github.ref }}' is not a production branch"
            echo "IS_PRODUCTION_BRANCH=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs:
      [
        formatting,
        context
      ]
    name: Build
    outputs:
      release-artifact-name: ${{ steps.build-sdk.outputs.release-name }}
    permissions:
      actions: write # Required to eventually delete stashes
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Build SDK
        id: build-sdk
        uses: ./.github/actions/build-sdk
        with:
          force-update-non-sdk-m2-stash: ${{ needs.formatting.outputs.non-sdk-m2-stash-created }}
          prepare-release: ${{ needs.context.outputs.is-production-branch == 'true' }}

  test:
    needs: build
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Test SDK
        uses: ./.github/actions/test-sdk

  checkstyle:
    needs: build
    runs-on: ubuntu-latest
    name: Checkstyle
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Scan With CheckStyle
        uses: ./.github/actions/scan-with-checkstyle

  pmd:
    needs: build
    runs-on: ubuntu-latest
    name: PMD
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Scan With PMD
        uses: ./.github/actions/scan-with-pmd

  spotbugs:
    needs: build
    runs-on: ubuntu-latest
    name: Spotbugs
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Scan With SpotBugs
        uses: ./.github/actions/scan-with-spotbugs

  codeql:
    name: Analyze with CodeQL
    needs: build # We depend on the Build job here to avoid downloading dependencies twice
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Scan With CodeQL
        uses: ./.github/actions/scan-with-codeql

  archetypes:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        task:
          - {
              "archetype": "spring-boot3",
              "javaVersion": 17,
              "startCommand": "mvn spring-boot:run -B",
            }
    name: Test Archetype ${{ matrix.task.archetype }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ matrix.task.javaVersion }}

      - name: Verify Archetype
        uses: ./.github/actions/verify-archetype
        with:
          archetype: ${{ matrix.task.archetype }}

  deploy-snapshot:
    name: Deploy Snapshot
    if: ${{ needs.context.outputs.is-production-branch == 'true' }}
    needs: [context, build, codeql, test, checkstyle, pmd, spotbugs, archetypes]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: artifactory-snapshots
          server-username: ARTIFACTORY_USER # env variable for username in deploy
          server-password: ARTIFACTORY_TOKEN # env variable for token in deploy

      - name: Download Release ZIP
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.release-artifact-name }}
          path: .

      - name: Publish Snapshot
        run: >
          unzip ${{ needs.build.outputs.release-artifact-name }}.zip -d .

          cd release

          mvn
          $MVN_CLI_ARGS
          -Durl=https://common.repositories.cloud.sap/artifactory/build-snapshots-cloudsdk
          -DrepositoryId=artifactory-snapshots
          -Dmaven.install.skip=true
          -Dmaven.test.skip
          -Dmaven.compiler.showCompilationChanges
          -Dhttp.keepAlive=false
          deploy
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}

  notify-job:
    runs-on: ubuntu-latest
    needs:
      [
        formatting,
        context,
        build,
        test,
        pmd,
        spotbugs,
        checkstyle,
        codeql,
        archetypes,
        deploy-snapshot,
      ]
    if: ${{ failure() && needs.context.outputs.is-production-branch == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Notify
        run: python .pipeline/scripts/notify.py
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          WORKFLOW: ${{ github.workflow }}
          WORKFLOW_RUN_URL: https://github.com/SAP/cloud-sdk-java/actions/runs/${{ github.run_id }}
          BRANCH_NAME: ${{ github.ref_name }}
