name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.color=false"
  MVN_CLI_ARGS_SINGLE_THREAD: "--batch-mode --fail-at-end --show-version"
  MVN_CLI_ARGS: "--batch-mode --fail-at-end --show-version --threads 1C"
  MVN_SKIP_ARGS: "-DskipFormatting -Denforcer.skip -Djacoco.skip -Dmdep.analyze.skip"

jobs:
  formatting:
    runs-on: ubuntu-latest
    name: Verify Formatting
    outputs:
      non-sdk-m2-stash-created: ${{ steps.stash-non-sdk-m2.outputs.stashed }}
    permissions:
      actions: write # Required to eventually delete stashes
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Load Non-SDK M2
        uses: ./.github/actions/unstash-non-sdk-m2
      - name: Verify Formatting
        uses: ./.github/actions/verify-formatting
      - name: Stash Non-SDK M2
        id: stash-non-sdk-m2
        uses: ./.github/actions/stash-non-sdk-m2

  build:
    runs-on: ubuntu-latest
    needs: formatting
    name: Build
    outputs:
      release-artifact-name: ${{ steps.build-sdk.outputs.release-name }}
    permissions:
      actions: write # Required to eventually delete stashes
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Build SDK
        id: build-sdk
        uses: ./.github/actions/build-sdk
        with:
          force-update-non-sdk-m2-stash: ${{ needs.formatting.outputs.non-sdk-m2-stash-created }}

  test:
    needs: build
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Test SDK
        uses: ./.github/actions/test-sdk

  checkstyle:
    needs: build
    runs-on: ubuntu-latest
    name: Checkstyle
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Load Non-SDK M2
        uses: ./.github/actions/unstash-non-sdk-m2
      - name: Load SDK M2
        uses: ./.github/actions/unstash-sdk-m2
      - name: Load SDK Target Dirs
        uses: ./.github/actions/unstash-sdk-targets

      - name: Checkstyle
        run: |
          mvn $MVN_CLI_ARGS $MVN_SKIP_ARGS -P!build-test-modules org.apache.maven.plugins:maven-checkstyle-plugin:checkstyle
      - name: Checkstyle Results
        run: |
          python .pipeline/scripts/print-checkstyle.py

  pmd:
    needs: build
    runs-on: ubuntu-latest
    name: PMD
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Load Non-SDK M2
        uses: ./.github/actions/unstash-non-sdk-m2
      - name: Load SDK M2
        uses: ./.github/actions/unstash-sdk-m2
      - name: Load SDK Target Dirs
        uses: ./.github/actions/unstash-sdk-targets

      - name: PMD
        run: |
          mvn $MVN_CLI_ARGS org.apache.maven.plugins:maven-pmd-plugin:pmd
      - name: PMD Report
        run: |
          python .pipeline/scripts/print-pmd.py

  spotbugs:
    needs: build
    runs-on: ubuntu-latest
    name: Spotbugs
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Load Non-SDK M2
        uses: ./.github/actions/unstash-non-sdk-m2
      - name: Load SDK M2
        uses: ./.github/actions/unstash-sdk-m2
      - name: Load SDK Target Dirs
        uses: ./.github/actions/unstash-sdk-targets

      - name: Spotbugs
        run: |
          mvn $MVN_CLI_ARGS com.github.spotbugs:spotbugs-maven-plugin:spotbugs
      - name: Spotbugs Report
        run: |
          python .pipeline/scripts/print-spotbugs.py

  codeql:
    name: Analyze with CodeQL
    needs: build # We depend on the Build job here to avoid downloading dependencies twice
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: "java"
          queries: security-extended

      - name: Build SDK
        id: build-sdk
        uses: ./.github/actions/build-sdk

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:java"

  archetypes:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        task:
          - {
              "archetype": "spring-boot3",
              "javaVersion": 17,
              "startCommand": "mvn spring-boot:run -B",
            }
    name: Test Archetype ${{ matrix.task.archetype }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ matrix.task.javaVersion }}

      - name: Verify Archetype
        uses: ./.github/actions/verify-archetype
        with:
          archetype: ${{ matrix.task.archetype }}

#  deploy-snapshot:
#    name: Deploy Snapshot
#    if: ${{ github.ref == 'refs/heads/main' }}
#    needs: [build, codeql, test, checkstyle, pmd, spotbugs, archetypes]
#    runs-on: ubuntu-latest
#    timeout-minutes: 15
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#      - name: Setup java
#        uses: actions/setup-java@v3
#        with:
#          distribution: "temurin"
#          java-version: "17"
#          server-id: artifactory-snapshots
#          server-username: ARTIFACTORY_USER # env variable for username in deploy
#          server-password: ARTIFACTORY_TOKEN # env variable for token in deploy
#
#      - name: Download Release ZIP
#        uses: actions/download-artifact@v3
#        with:
#          name: cloud-sdk-package
#          path: .
#
#      - name: Publish Snapshot
#        run: >
#          unzip sap-cloud-sdk-java-${{ needs.build.outputs.version }}.zip -d .
#
#          cd release
#
#          mvn
#          $MVN_CLI_ARGS
#          -Durl=https://common.repositories.cloud.sap/artifactory/build-snapshots-cloudsdk
#          -DrepositoryId=artifactory-snapshots
#          -Dmaven.install.skip=true
#          -Dmaven.test.skip
#          -Dmaven.compiler.showCompilationChanges
#          -Dhttp.keepAlive=false
#          deploy
#        env:
#          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
#          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
#  notify-job:
#    runs-on: ubuntu-latest
#    needs:
#      [
#        formatting,
#        build,
#        test,
#        pmd,
#        spotbugs,
#        checkstyle,
#        codeql,
#        archetypes,
#        deploy-snapshot,
#      ]
#    if: ${{ failure() && github.ref == 'refs/heads/main' }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Notify
#        run: python .pipeline/scripts/notify.py
#        env:
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#          WORKFLOW: ${{ github.workflow }}
#          WORKFLOW_RUN_URL: https://github.com/SAP/cloud-sdk-java/actions/runs/${{ github.run_id }}
#          BRANCH_NAME: ${{ github.ref_name }}
