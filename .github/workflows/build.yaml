name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.color=false"
  MVN_CLI_ARGS: "--batch-mode --no-transfer-progress --fail-at-end --show-version"

jobs:
  ### Verify formatting ###
  # this is done first because it is fast and we don't want to waste time on the other, more expensive steps
  formatting:
    runs-on: ubuntu-latest
    # Permissions block is optional, useful for dependabot checks
    permissions:
      checks: write
      contents: read
    strategy:
      matrix:
        task:
          - {
              "name": "Code Formatting",
              "command": "net.revelc.code.formatter:formatter-maven-plugin:validate",
            }
          - {
              "name": "Import Sorting",
              "command": "net.revelc.code:impsort-maven-plugin:check",
            }
          - {
              "name": "POM File Sorting",
              "command": "com.github.ekryd.sortpom:sortpom-maven-plugin:verify",
            }
          # - {
          #     "name": "Checkstyle",
          #     "command": "org.apache.maven.plugins:maven-checkstyle-plugin:checkstyle",
          #   }
    name: ${{ matrix.task.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        with:
          path: ~/.m2/repository
          key: maven
      - name: ${{ matrix.task.name }}
        run: |
          mvn $MVN_CLI_ARGS ${{ matrix.task.command }}
      - name: Checkstyle Results
        if: ${{ contains(matrix.tool.name, 'Checkstyle') }}
        run: |
          python .pipeline/scripts/print-checkstyle.py

  build:
    runs-on: ubuntu-latest
    needs: formatting
    # Permissions block is optional, useful for dependabot checks
    permissions:
      checks: write
      contents: read
    name: Build
    outputs:
      version: ${{ steps.get-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: Determine Version
        run: echo "VERSION=$(cat latest.json | jq -r .version)" >> $GITHUB_OUTPUT
        id: get-version
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ~/.m2/repository
          key: maven
      - name: Compile
        # we need to use install here because otherwise the code checks below don't work
        # they require the JARs of all modules to work, so those need to be installed
        run: |
          mvn $MVN_CLI_ARGS install -DskipTests -DskipFormatting
      - name: Local Changes Check
        run: |
          CHANGED_FILES="$(git --no-pager diff --name-only)"
          if [ ! -z "$CHANGED_FILES" ]; then
              echo "There are local changes in the following files:"
              echo "$CHANGED_FILES"
              echo "Printing the git diff:"
              git --no-pager diff
              exit 1
          fi

      # M2
      - name: ZIP M2 SDK Directory
        run: |
          cd $HOME/.m2/repository/com/sap/cloud/sdk
          zip -r m2-sdk.zip .
      - name: Upload M2 SDK Directory
        uses: actions/upload-artifact@v3
        with:
          name: m2-sdk
          path: ~/.m2/repository/com/sap/cloud/sdk/m2-sdk.zip
          retention-days: 1
      - name: Upload Archetype Catalog
        uses: actions/upload-artifact@v3
        with:
          name: archetype-catalog
          path: ~/.m2/repository/archetype-catalog.xml
          retention-days: 1
      - name: Purge SDK Artifacts from Maven Repository
        run: |
          rm -rf $HOME/.m2/repository/com/sap/cloud/sdk/
        continue-on-error: true
      - name: Save Maven Repository
        uses: actions/cache/save@v3
        if: steps.restore-cache.outputs.cache-hit != 'true'
        id: save-cache
        with:
          path: ~/.m2/repository
          key: maven
      # Target
      - name: ZIP Target Dirs
        run: |
          zip -r target.zip $(find . -path './**/target/**/*')
      - name: Upload Target Dirs
        uses: actions/upload-artifact@v3
        with:
          name: target-dirs
          path: target.zip
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    # Permissions block is optional, useful for dependabot checks
    permissions:
      checks: write
      contents: read
    name: Test
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ~/.m2/repository
          key: maven

      # M2
      - name: Download M2 SDK Directory
        uses: actions/download-artifact@v3
        with:
          name: m2-sdk
          path: .
      - name: UNZIP M2 SDK Directory
        run: |
          unzip m2-sdk.zip -d ~/.m2/repository/com/sap/cloud/sdk

      # Target
      - name: Download Target Dirs
        uses: actions/download-artifact@v3
        with:
          name: target-dirs
          path: .
      - name: UNZIP Target Dirs
        run: |
          unzip -D target.zip
      - name: Test
        run: |
          mvn $MVN_CLI_ARGS jacoco:prepare-agent surefire:test jacoco:report
      - name: Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
      - name: Coverage Report
        run: |
          python .pipeline/scripts/print-coverage.py --jacoco-report-pattern '**/target/site/jacoco/jacoco.csv'

  pmd:
    needs: build
    runs-on: ubuntu-latest
    name: PMD
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      # M2
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ~/.m2/repository
          key: maven
      - name: Download M2 SDK Directory
        uses: actions/download-artifact@v3
        with:
          name: m2-sdk
          path: .
      - name: UNZIP M2 SDK Directory
        run: |
          unzip m2-sdk.zip -d ~/.m2/repository/com/sap/cloud/sdk

      # Target
      - name: Download Target Dirs
        uses: actions/download-artifact@v3
        with:
          name: target-dirs
          path: .
      - name: UNZIP Target Dirs
        run: |
          unzip -D target.zip
      - name: PMD
        run: |
          mvn $MVN_CLI_ARGS org.apache.maven.plugins:maven-pmd-plugin:pmd
      - name: PMD Report
        run: |
          python .pipeline/scripts/print-pmd.py

  spotbugs:
    needs: build
    runs-on: ubuntu-latest
    # Permissions block is optional, useful for dependabot checks
    permissions:
      checks: write
      contents: read
    name: Spotbugs
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17
      # M2
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ~/.m2/repository
          key: maven
      - name: Download M2 SDK Directory
        uses: actions/download-artifact@v3
        with:
          name: m2-sdk
          path: .
      - name: UNZIP M2 SDK Directory
        run: |
          unzip m2-sdk.zip -d ~/.m2/repository/com/sap/cloud/sdk

      # Target
      - name: Download Target Dirs
        uses: actions/download-artifact@v3
        with:
          name: target-dirs
          path: .
      - name: UNZIP Target Dirs
        run: |
          unzip -D target.zip
      - name: Spotbugs
        run: |
          mvn $MVN_CLI_ARGS com.github.spotbugs:spotbugs-maven-plugin:spotbugs
      - name: Spotbugs Report
        run: |
          python .pipeline/scripts/print-spotbugs.py

  codeql:
    name: Analyze with CodeQL
    needs: formatting
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: "java"
          queries: security-extended

      # M2
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ~/.m2/repository
          key: maven

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:java"

  archetypes:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      checks: write
      contents: read
    strategy:
      matrix:
        task:
          - {
              "archetype": "scp-cf-spring",
              "javaVersion": 8,
              "startCommand": "mvn spring-boot:run -B",
            }
          - {
              "archetype": "scp-cf-spring-jakarta",
              "javaVersion": 17,
              "startCommand": "mvn spring-boot:run -B",
            }
    name: Test Archetype ${{ matrix.task.archetype }}
    steps:
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ matrix.task.javaVersion }}
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ~/.m2/repository
          key: maven-central
      - name: Download M2 SDK Directory
        uses: actions/download-artifact@v3
        with:
          name: m2-sdk
          path: .
      - name: UNZIP M2 SDK Directory
        run: |
          mkdir -p ~/.m2/repository/com/sap/cloud/sdk
          unzip m2-sdk.zip -d ~/.m2/repository/com/sap/cloud/sdk

      - name: Download Archetype Catalog
        uses: actions/download-artifact@v3
        with:
          name: archetype-catalog
          path: ~/.m2/repository/archetype-catalog.xml
      - name: Generate ${{ matrix.task.archetype }}
        run: >
          mvn archetype:generate -B
          -DarchetypeCatalog=local
          -DarchetypeGroupId=com.sap.cloud.sdk.archetypes
          -DarchetypeArtifactId=${{ matrix.task.archetype }}
          -DarchetypeVersion=${{ needs.build.outputs.version }}
          -DgroupId=com.sap.test
          -DartifactId=example-${{ matrix.task.archetype }}
          -Dversion=1.0-SNAPSHOT
          -Dpackage=com.sap.test
          -Dhttp.keepAlive=false

      - name: Verify ${{ matrix.task.archetype }}
        working-directory: ./example-${{ matrix.task.archetype }}
        run: >
          mvn clean verify -B
          -Dhttp.keepAlive=false
          -Dmaven.test.skip=true
      - name: Test ${{ matrix.task.name }}
        working-directory: ./example-${{ matrix.task.archetype }}
        run: mvn test -B -Dsurefire.logLevel='error'
      - name: Spotbugs ${{ matrix.task.archetype }}
        working-directory: ./example-${{ matrix.task.archetype }}
        run: >
          mvn com.github.spotbugs:spotbugs-maven-plugin:check -B
          -pl !integration-tests
          -Dhttp.keepAlive=false
          -Dmaven.wagon.http.pool=false

      - name: Start ${{ matrix.task.archetype }}
        working-directory: ./example-${{ matrix.task.archetype }}/application
        run: |
          logFilePath=log.txt
          ${{ matrix.task.startCommand }} > $logFilePath 2>&1 &

          if ! curl -s --retry 60 --retry-delay 3 --retry-all-errors http://127.0.0.1:8080/hello ; then
            echo "Project generated from archetype ${{ matrix.task.archetype }} failed to start locally."
            cat $logFilePath
            exit 1
          fi

          if ! grep -q "I am running!" $logFilePath; then
            echo "Project generated from archetype ${{ matrix.task.archetype }} started locally, but did not contain the expected log output."
            cat $logFilePath
            exit 1
          fi

          if grep -iq "caused by" $logFilePath; then
            echo "Project generated from archetype ${{ matrix.task.archetype }} started locally, but an unexpected error occurred."
            cat $logFilePath
            exit 1
          fi

      - name: Verify .gitignore ${{ matrix.task.archetype }}
        working-directory: ./example-${{ matrix.task.archetype }}
        run: |
          if [ ! -f .gitignore ]; then
              ls -lah
              echo "Project generated from archetype does not contain a .gitignore file."
              exit 1
          fi

      - name: Purge SDK Artifacts from Maven Repository
        run: |
          rm -rf $HOME/.m2/repository/com/sap/cloud/sdk/
      - name: Save Maven Repository
        uses: actions/cache/save@v3
        if: steps.restore-cache.outputs.cache-hit != 'true'
        id: save-cache
        with:
          path: ~/.m2/repository
          key: maven-central

  deploy-snapshot:
    name: Deploy Snapshot
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [codeql, test, pmd, spotbugs, archetypes]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          server-id: artifactory-snapshots
          server-username: ARTIFACTORY_USER # env variable for username in deploy
          server-password: ARTIFACTORY_TOKEN # env variable for token in deploy
      - name: Determine Maven Excludes
        run: |
          python .pipeline/scripts/get-maven-excludes.py --filter-key releaseAudience --filter-value None
        id: get-maven-excludes-for-deploy-snapshot
      # M2
      - name: Load Maven Repository
        uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ~/.m2/repository
          key: maven
      - name: Download M2 SDK Directory
        uses: actions/download-artifact@v3
        with:
          name: m2-sdk
          path: .
      - name: UNZIP M2 SDK Directory
        run: |
          unzip m2-sdk.zip -d ~/.m2/repository/com/sap/cloud/sdk

      # Target
      - name: Download Target Dirs
        uses: actions/download-artifact@v3
        with:
          name: target-dirs
          path: .
      - name: UNZIP Target Dirs
        run: |
          unzip -DD target.zip
      - name: Publish Snapshot
        run: >
          mvn $MVN_CLI_ARGS
          -DaltSnapshotDeploymentRepository=artifactory-snapshots::https://common.repositories.cloud.sap/artifactory/build-snapshots-cloudsdk
          -Dmaven.test.skip -Dmaven.compiler.showCompilationChanges -Dhttp.keepAlive=false -Dformatter.skip
          -Denforcer.skip -Djacoco.skip -Dimpsort.skip -Dmdep.analyze.skip
          -pl ${{ steps.get-maven-excludes-for-deploy-snapshot.outputs.PREFIXED_EXCLUDES }}
          deploy
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
  notify-job:
    runs-on: ubuntu-latest
    needs: [formatting, build, test, pmd, spotbugs, codeql, archetypes, deploy-snapshot]
    if: ${{ failure() && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Notify
        run: python .pipeline/scripts/notify.py
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          WORKFLOW: ${{ github.workflow }}
          WORKFLOW_RUN_URL: https://github.com/SAP/cloud-sdk-java/actions/runs/${{ github.run_id }}
          BRANCH_NAME: ${{ github.ref_name }}

