name: "Stash"
description: "Stashes the specified directories. This action uses the GitHub Cache API internally."

inputs:
  path:
    description: "The path(s) (supports GLOB pattern) to stash"
    required: true
  key:
    description: "The stash key to use"
    required: true
  force-update:
    description: "Overrides any existing stashes"
    required: false
    default: "false"
  update-after-days:
    description: "Overrides any existing stash IF the existing stash is older than the specified amount of days"
    required: false
    default: ""

outputs:
  stashed:
    description: "Whether the specified path(s) were stashed"
    value: ${{ steps.should-save-cache.outputs.RESULT }}

runs:
  using: composite
  steps:
    - name: Print Action Start
      run: echo ">>>>> Starting Stash Action; inputs = ${{ toJson(inputs) }}"
      shell: bash

    - name: Fetch Existing Caches
      id: fetch-caches
      if: ${{ inputs.force-update == 'true' || inputs.update-after-days != '' }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        CACHES=$(gh cache list --json id,key,ref,createdAt)
        EXISTING_CACHE=$(echo $CACHES | jq -c '.[] | select(.key == "${{ inputs.key }}" and .ref == "${{ github.ref }}")')
        if [[ -z $EXISTING_CACHE ]]; then
          echo "No existing cache found with key ${{ inputs.key }} and ref ${{ github.ref }}."
          exit 1
        fi
        
        echo "Existing cache found with key ${{ inputs.key }} and ref ${{ github.ref }}: $EXISTING_CACHE"
        echo "CACHE='$EXISTING_CACHE'" >> $GITHUB_OUTPUT
      shell: bash
      continue-on-error: true

    - name: Force Delete Cache
      if: ${{ inputs.force-update == 'true' && steps.fetch-caches.outcome == 'success' }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Force deleting cache with key ${{ inputs.key }}."
        CACHE_ID=$(echo ${{ steps.fetch-caches.outputs.CACHE }} | jq -r '.id')
        gh cache delete $CACHE_ID
      shell: bash

    - name: Delete Cache If Too Old
      id: delete-cache-if-too-old
      if: ${{ inputs.force-update != 'true' && inputs.update-after-days != '' && steps.fetch-caches.outcome == 'success' }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Checking whether existing Cache is older than ${{ inputs.update-after-days }} days: ${{ steps.fetch-caches.outputs.CACHE }}"
        CREATED_AT=$(echo ${{ steps.fetch-caches.outputs.CACHE }} | jq -r '.createdAt')
        CREATED_AT_TIMESTAMP=$(date -d $CREATED_AT +%s)
        NOW_TIMESTAMP=$(date +%s)
        SECONDS_SINCE_CREATED=$((NOW_TIMESTAMP - CREATED_AT_TIMESTAMP))
        THRESHOLD=$((60*60*24*${{ inputs.update-after-days }}))
        
        if [ $SECONDS_SINCE_CREATED -gt $THRESHOLD ]; then
          echo "Cache with key ${{ inputs.key }} is older than ${{ inputs.update-after-days }} days; deleting."
          CACHE_ID=$(echo ${{ steps.fetch-caches.outputs.CACHE }} | jq -r '.id')
          gh cache delete $CACHE_ID
        else
          echo "Cache with key ${{ inputs.key }} is not older than ${{ inputs.update-after-days }} days; not deleting."
          exit 1  
        fi
      shell: bash
      continue-on-error: true

    - name: Should Save Cache
      id: should-save-cache
      run: |
        if [[ ${{ inputs.force-update }} -eq 'true' ]]; then
          echo "RESULT='true'" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        if [[ ${{ steps.fetch-caches.outcome }} -ne 'success' ]]; then
          echo "RESULT='true'" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        if [[ ${{ steps.delete-cache-if-too-old.outcome }} -eq 'success' ]]; then
          echo "RESULT='true'" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "RESULT='false'" >> $GITHUB_OUTPUT
      shell: bash

    - name: Save Cache
      if: ${{ steps.should-save-cache.outputs.RESULT == 'true' }}
      uses: actions/cache/save@v3
      with:
        path: ${{ inputs.path }}
        key: ${{ inputs.key }}

    - name: Print Action End
      if: always()
      run: echo "<<<<< Finished Stash Action"
      shell: bash
