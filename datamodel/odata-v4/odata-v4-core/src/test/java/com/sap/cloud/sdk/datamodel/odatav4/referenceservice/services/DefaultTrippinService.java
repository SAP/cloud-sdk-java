/*
 * Copyright (c) 2023 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 4.21.0
 */

package com.sap.cloud.sdk.datamodel.odatav4.referenceservice.services;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.annotation.Nonnull;

import com.sap.cloud.sdk.datamodel.odatav4.core.BatchRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.CountRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.CreateRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.DeleteRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.GetAllRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.GetByKeyRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.ServiceWithNavigableEntities;
import com.sap.cloud.sdk.datamodel.odatav4.core.SingleValueActionRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.SingleValueFunctionRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.core.UpdateRequestBuilder;
import com.sap.cloud.sdk.datamodel.odatav4.referenceservice.namespaces.trippin.Airline;
import com.sap.cloud.sdk.datamodel.odatav4.referenceservice.namespaces.trippin.Airport;
import com.sap.cloud.sdk.datamodel.odatav4.referenceservice.namespaces.trippin.Person;

import lombok.Getter;

/**
 * <h3>Details:</h3>
 * <table summary='Details'>
 * <tr>
 * <td align='right'>OData Service:</td>
 * <td>trippin</td>
 * </tr>
 * </table>
 *
 */
public class DefaultTrippinService implements ServiceWithNavigableEntities, TrippinService
{

    @Nonnull
    @Getter
    private final String servicePath;

    /**
     * Creates a service using {@link TrippinService#DEFAULT_SERVICE_PATH} to send the requests.
     *
     */
    public DefaultTrippinService()
    {
        servicePath = TrippinService.DEFAULT_SERVICE_PATH;
    }

    /**
     * Creates a service using the provided service path to send the requests.
     * <p>
     * Used by the fluent {@link #withServicePath(String)} method.
     *
     */
    private DefaultTrippinService( @Nonnull final String servicePath )
    {
        this.servicePath = servicePath;
    }

    @Override
    @Nonnull
    public DefaultTrippinService withServicePath( @Nonnull final String servicePath )
    {
        return new DefaultTrippinService(servicePath);
    }

    @Override
    @Nonnull
    public BatchRequestBuilder batch()
    {
        return new BatchRequestBuilder(servicePath);
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Person> getAllPeople()
    {
        return new GetAllRequestBuilder<Person>(servicePath, Person.class, "People");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Person> countPeople()
    {
        return new CountRequestBuilder<Person>(servicePath, Person.class, "People");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Person> getPeopleByKey( final String userName )
    {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("UserName", userName);
        return new GetByKeyRequestBuilder<Person>(servicePath, Person.class, key, "People");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Person> createPeople( @Nonnull final Person person )
    {
        return new CreateRequestBuilder<Person>(servicePath, person, "People");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Person> updatePeople( @Nonnull final Person person )
    {
        return new UpdateRequestBuilder<Person>(servicePath, person, "People");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Person> deletePeople( @Nonnull final Person person )
    {
        return new DeleteRequestBuilder<Person>(servicePath, person, "People");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Airline> getAllAirlines()
    {
        return new GetAllRequestBuilder<Airline>(servicePath, Airline.class, "Airlines");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Airline> countAirlines()
    {
        return new CountRequestBuilder<Airline>(servicePath, Airline.class, "Airlines");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Airline> getAirlinesByKey( final String airlineCode )
    {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("AirlineCode", airlineCode);
        return new GetByKeyRequestBuilder<Airline>(servicePath, Airline.class, key, "Airlines");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Airline> createAirlines( @Nonnull final Airline airline )
    {
        return new CreateRequestBuilder<Airline>(servicePath, airline, "Airlines");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Airline> updateAirlines( @Nonnull final Airline airline )
    {
        return new UpdateRequestBuilder<Airline>(servicePath, airline, "Airlines");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Airline> deleteAirlines( @Nonnull final Airline airline )
    {
        return new DeleteRequestBuilder<Airline>(servicePath, airline, "Airlines");
    }

    @Override
    @Nonnull
    public GetAllRequestBuilder<Airport> getAllAirports()
    {
        return new GetAllRequestBuilder<Airport>(servicePath, Airport.class, "Airports");
    }

    @Override
    @Nonnull
    public CountRequestBuilder<Airport> countAirports()
    {
        return new CountRequestBuilder<Airport>(servicePath, Airport.class, "Airports");
    }

    @Override
    @Nonnull
    public GetByKeyRequestBuilder<Airport> getAirportsByKey( final String icaoCode )
    {
        final Map<String, Object> key = new HashMap<String, Object>();
        key.put("IcaoCode", icaoCode);
        return new GetByKeyRequestBuilder<Airport>(servicePath, Airport.class, key, "Airports");
    }

    @Override
    @Nonnull
    public CreateRequestBuilder<Airport> createAirports( @Nonnull final Airport airport )
    {
        return new CreateRequestBuilder<Airport>(servicePath, airport, "Airports");
    }

    @Override
    @Nonnull
    public UpdateRequestBuilder<Airport> updateAirports( @Nonnull final Airport airport )
    {
        return new UpdateRequestBuilder<Airport>(servicePath, airport, "Airports");
    }

    @Override
    @Nonnull
    public DeleteRequestBuilder<Airport> deleteAirports( @Nonnull final Airport airport )
    {
        return new DeleteRequestBuilder<Airport>(servicePath, airport, "Airports");
    }

    @Override
    @Nonnull
    public SingleValueFunctionRequestBuilder<Person> getPersonWithMostFriends()
    {
        return new SingleValueFunctionRequestBuilder<Person>(servicePath, "GetPersonWithMostFriends", Person.class);
    }

    @Override
    @Nonnull
    public
        SingleValueFunctionRequestBuilder<Airport>
        getNearestAirport( @Nonnull final Double lat, @Nonnull final Double lon )
    {
        final LinkedHashMap<String, Object> parameters = new LinkedHashMap<String, Object>();
        parameters.put("lat", lat);
        parameters.put("lon", lon);
        return new SingleValueFunctionRequestBuilder<Airport>(
            servicePath,
            "GetNearestAirport",
            parameters,
            Airport.class);
    }

    @Override
    @Nonnull
    public SingleValueActionRequestBuilder<Void> resetDataSource()
    {
        return new SingleValueActionRequestBuilder<Void>(servicePath, "ResetDataSource", Void.class);
    }

}
