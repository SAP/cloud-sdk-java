/*
 * Copyright (c) 2024 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 4.21.0
 */

package com.sap.cloud.sdk.datamodel.odatav4.referenceservice.namespaces.trippin;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.sap.cloud.sdk.datamodel.odata.client.request.ODataEntityKey;
import com.sap.cloud.sdk.datamodel.odatav4.core.SimpleProperty;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntity;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEntitySet;
import com.sap.cloud.sdk.datamodel.odatav4.core.VdmEnum;
import com.sap.cloud.sdk.datamodel.odatav4.referenceservice.services.TrippinService;
import com.sap.cloud.sdk.result.ElementName;

import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * <p>
 * Original entity name from the Odata EDM: <b>Person</b>
 * </p>
 *
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString( doNotUseGetters = true, callSuper = true )
@EqualsAndHashCode( doNotUseGetters = true, callSuper = true )
@JsonAdapter( com.sap.cloud.sdk.datamodel.odatav4.adapter.GsonVdmAdapterFactory.class )
@JsonSerialize( using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectSerializer.class )
@JsonDeserialize( using = com.sap.cloud.sdk.datamodel.odatav4.adapter.JacksonVdmObjectDeserializer.class )
public class Person extends VdmEntity<Person> implements VdmEntitySet
{

    @Getter
    private final java.lang.String odataType = "Trippin.Person";
    /**
     * Selector for all available fields of Person.
     *
     */
    public final static SimpleProperty<Person> ALL_FIELDS = all();
    /**
     * (Key Field) Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>UserName</b>
     * </p>
     *
     * @return The userName contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "UserName" )
    private java.lang.String userName;
    public final static SimpleProperty.String<Person> USER_NAME =
        new SimpleProperty.String<Person>(Person.class, "UserName");
    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>FirstName</b>
     * </p>
     *
     * @return The firstName contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "FirstName" )
    private java.lang.String firstName;
    public final static SimpleProperty.String<Person> FIRST_NAME =
        new SimpleProperty.String<Person>(Person.class, "FirstName");
    /**
     * Constraints: Nullable, Maximum length: 26
     * <p>
     * Original property name from the Odata EDM: <b>LastName</b>
     * </p>
     *
     * @return The lastName contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "LastName" )
    private java.lang.String lastName;
    public final static SimpleProperty.String<Person> LAST_NAME =
        new SimpleProperty.String<Person>(Person.class, "LastName");
    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>MiddleName</b>
     * </p>
     *
     * @return The middleName contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "MiddleName" )
    private java.lang.String middleName;
    public final static SimpleProperty.String<Person> MIDDLE_NAME =
        new SimpleProperty.String<Person>(Person.class, "MiddleName");
    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>Gender</b>
     * </p>
     *
     * @return The gender contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "Gender" )
    private PersonGender gender;
    public final static SimpleProperty.Enum<Person, PersonGender> GENDER =
        new SimpleProperty.Enum<Person, PersonGender>(Person.class, "Gender", "Trippin.PersonGender");
    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>Age</b>
     * </p>
     *
     * @return The age contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "Age" )
    private Long age;
    public final static SimpleProperty.NumericInteger<Person> AGE =
        new SimpleProperty.NumericInteger<Person>(Person.class, "Age");
    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>Emails</b>
     * </p>
     *
     * @return The emails contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "Emails" )
    private java.util.Collection<java.lang.String> emails;
    public final static SimpleProperty.Collection<Person, java.lang.String> EMAILS =
        new SimpleProperty.Collection<Person, java.lang.String>(Person.class, "Emails", java.lang.String.class);
    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>AddressInfo</b>
     * </p>
     *
     * @return The addressInfo contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "AddressInfo" )
    private java.util.Collection<Location> addressInfo;
    /**
     * Use with available request builders to apply the <b>AddressInfo</b> complex property to query operations.
     *
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.ComplexProperty.Collection<Person, Location> ADDRESS_INFO =
        new com.sap.cloud.sdk.datamodel.odatav4.core.ComplexProperty.Collection<Person, Location>(
            Person.class,
            "AddressInfo",
            Location.class);
    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>HomeAddress</b>
     * </p>
     *
     * @return The homeAddress contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "HomeAddress" )
    private Location homeAddress;
    /**
     * Use with available request builders to apply the <b>HomeAddress</b> complex property to query operations.
     *
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.ComplexProperty.Single<Person, Location> HOME_ADDRESS =
        new com.sap.cloud.sdk.datamodel.odatav4.core.ComplexProperty.Single<Person, Location>(
            Person.class,
            "HomeAddress",
            Location.class);
    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>FavoriteFeature</b>
     * </p>
     *
     * @return The favoriteFeature contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "FavoriteFeature" )
    private Feature favoriteFeature;
    public final static SimpleProperty.Enum<Person, Feature> FAVORITE_FEATURE =
        new SimpleProperty.Enum<Person, Feature>(Person.class, "FavoriteFeature", "Trippin.Feature");
    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>Features</b>
     * </p>
     *
     * @return The features contained in this {@link VdmEntity}.
     */
    @Nullable
    @ElementName( "Features" )
    private java.util.Collection<Feature> features;
    public final static SimpleProperty.Collection<Person, Feature> FEATURES =
        new SimpleProperty.Collection<Person, Feature>(Person.class, "Features", Feature.class);
    /**
     * Navigation property <b>Friends</b> for <b>Person</b> to multiple <b>Person</b>.
     *
     */
    @ElementName( "Friends" )
    @Getter( AccessLevel.NONE )
    @Setter( AccessLevel.NONE )
    private List<Person> toFriends;
    /**
     * Navigation property <b>BestFriend</b> for <b>Person</b> to single <b>Person</b>.
     *
     */
    @ElementName( "BestFriend" )
    @Nullable
    @Getter( AccessLevel.NONE )
    @Setter( AccessLevel.NONE )
    private Person toBestFriend;
    /**
     * Navigation property <b>Trips</b> for <b>Person</b> to multiple <b>Trip</b>.
     *
     */
    @ElementName( "Trips" )
    @Getter( AccessLevel.NONE )
    @Setter( AccessLevel.NONE )
    private List<Trip> toTrips;
    /**
     * Use with available request builders to apply the <b>Friends</b> navigation property to query operations.
     *
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Person, Person> TO_FRIENDS =
        new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Person, Person>(
            Person.class,
            "Friends",
            Person.class);
    /**
     * Use with available request builders to apply the <b>BestFriend</b> navigation property to query operations.
     *
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Person, Person> TO_BEST_FRIEND =
        new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Single<Person, Person>(
            Person.class,
            "BestFriend",
            Person.class);
    /**
     * Use with available request builders to apply the <b>Trips</b> navigation property to query operations.
     *
     */
    public final static com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Person, Trip> TO_TRIPS =
        new com.sap.cloud.sdk.datamodel.odatav4.core.NavigationProperty.Collection<Person, Trip>(
            Person.class,
            "Trips",
            Trip.class);

    @Nonnull
    @Override
    public Class<Person> getType()
    {
        return Person.class;
    }

    /**
     * (Key Field) Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>UserName</b>
     * </p>
     *
     * @param userName
     *            The userName to set.
     */
    public void setUserName( @Nullable final java.lang.String userName )
    {
        rememberChangedField("UserName", this.userName);
        this.userName = userName;
    }

    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>FirstName</b>
     * </p>
     *
     * @param firstName
     *            The firstName to set.
     */
    public void setFirstName( @Nullable final java.lang.String firstName )
    {
        rememberChangedField("FirstName", this.firstName);
        this.firstName = firstName;
    }

    /**
     * Constraints: Nullable, Maximum length: 26
     * <p>
     * Original property name from the Odata EDM: <b>LastName</b>
     * </p>
     *
     * @param lastName
     *            The lastName to set.
     */
    public void setLastName( @Nullable final java.lang.String lastName )
    {
        rememberChangedField("LastName", this.lastName);
        this.lastName = lastName;
    }

    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>MiddleName</b>
     * </p>
     *
     * @param middleName
     *            The middleName to set.
     */
    public void setMiddleName( @Nullable final java.lang.String middleName )
    {
        rememberChangedField("MiddleName", this.middleName);
        this.middleName = middleName;
    }

    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>Gender</b>
     * </p>
     *
     * @param gender
     *            The gender to set.
     */
    public void setGender( @Nullable final PersonGender gender )
    {
        rememberChangedField("Gender", this.gender);
        this.gender = gender;
    }

    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>Age</b>
     * </p>
     *
     * @param age
     *            The age to set.
     */
    public void setAge( @Nullable final Long age )
    {
        rememberChangedField("Age", this.age);
        this.age = age;
    }

    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>Emails</b>
     * </p>
     *
     * @param emails
     *            The emails to set.
     */
    public void setEmails( @Nullable final java.util.Collection<java.lang.String> emails )
    {
        rememberChangedField("Emails", this.emails);
        this.emails = emails;
    }

    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>AddressInfo</b>
     * </p>
     *
     * @param addressInfo
     *            The addressInfo to set.
     */
    public void setAddressInfo( @Nullable final java.util.Collection<Location> addressInfo )
    {
        rememberChangedField("AddressInfo", this.addressInfo);
        this.addressInfo = addressInfo;
    }

    /**
     * Constraints: Nullable
     * <p>
     * Original property name from the Odata EDM: <b>HomeAddress</b>
     * </p>
     *
     * @param homeAddress
     *            The homeAddress to set.
     */
    public void setHomeAddress( @Nullable final Location homeAddress )
    {
        rememberChangedField("HomeAddress", this.homeAddress);
        this.homeAddress = homeAddress;
    }

    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>FavoriteFeature</b>
     * </p>
     *
     * @param favoriteFeature
     *            The favoriteFeature to set.
     */
    public void setFavoriteFeature( @Nullable final Feature favoriteFeature )
    {
        rememberChangedField("FavoriteFeature", this.favoriteFeature);
        this.favoriteFeature = favoriteFeature;
    }

    /**
     * Constraints: Not nullable
     * <p>
     * Original property name from the Odata EDM: <b>Features</b>
     * </p>
     *
     * @param features
     *            The features to set.
     */
    public void setFeatures( @Nullable final java.util.Collection<Feature> features )
    {
        rememberChangedField("Features", this.features);
        this.features = features;
    }

    @Override
    protected java.lang.String getEntityCollection()
    {
        return "People";
    }

    @Nonnull
    @Override
    protected ODataEntityKey getKey()
    {
        final ODataEntityKey entityKey = super.getKey();
        entityKey.addKeyProperty("UserName", getUserName());
        return entityKey;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfFields()
    {
        final Map<java.lang.String, Object> values = super.toMapOfFields();
        values.put("UserName", getUserName());
        values.put("FirstName", getFirstName());
        values.put("LastName", getLastName());
        values.put("MiddleName", getMiddleName());
        values.put("Gender", getGender());
        values.put("Age", getAge());
        values.put("Emails", getEmails());
        values.put("AddressInfo", getAddressInfo());
        values.put("HomeAddress", getHomeAddress());
        values.put("FavoriteFeature", getFavoriteFeature());
        values.put("Features", getFeatures());
        return values;
    }

    @Override
    protected void fromMap( final Map<java.lang.String, Object> inputValues )
    {
        final Map<java.lang.String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if( values.containsKey("UserName") ) {
                final Object value = values.remove("UserName");
                if( (value == null) || (!value.equals(getUserName())) ) {
                    setUserName(((java.lang.String) value));
                }
            }
            if( values.containsKey("FirstName") ) {
                final Object value = values.remove("FirstName");
                if( (value == null) || (!value.equals(getFirstName())) ) {
                    setFirstName(((java.lang.String) value));
                }
            }
            if( values.containsKey("LastName") ) {
                final Object value = values.remove("LastName");
                if( (value == null) || (!value.equals(getLastName())) ) {
                    setLastName(((java.lang.String) value));
                }
            }
            if( values.containsKey("MiddleName") ) {
                final Object value = values.remove("MiddleName");
                if( (value == null) || (!value.equals(getMiddleName())) ) {
                    setMiddleName(((java.lang.String) value));
                }
            }
            if( values.containsKey("Gender") ) {
                final Object value = values.remove("Gender");
                if( (value instanceof java.lang.String) || (value == null) ) {
                    final PersonGender gender = VdmEnum.getConstant(PersonGender.class, ((java.lang.String) value));
                    if( !Objects.equals(gender, getGender()) ) {
                        setGender(gender);
                    }
                }
            }
            if( values.containsKey("Age") ) {
                final Object value = values.remove("Age");
                if( (value == null) || (!value.equals(getAge())) ) {
                    setAge(((Long) value));
                }
            }
            if( values.containsKey("Emails") ) {
                final Object value = values.remove("Emails");
                if( value instanceof Iterable ) {
                    final LinkedList<java.lang.String> emails = new LinkedList<java.lang.String>();
                    for( Object item : ((Iterable<?>) value) ) {
                        emails.add(((java.lang.String) item));
                    }
                    setEmails(emails);
                }
            }
            if( values.containsKey("FavoriteFeature") ) {
                final Object value = values.remove("FavoriteFeature");
                if( (value instanceof java.lang.String) || (value == null) ) {
                    final Feature favoriteFeature = VdmEnum.getConstant(Feature.class, ((java.lang.String) value));
                    if( !Objects.equals(favoriteFeature, getFavoriteFeature()) ) {
                        setFavoriteFeature(favoriteFeature);
                    }
                }
            }
            if( values.containsKey("Features") ) {
                final Object value = values.remove("Features");
                if( (value == null) && (getFeatures() != null) ) {
                    setFeatures(null);
                }
                if( value instanceof Iterable ) {
                    final LinkedList<Feature> features = new LinkedList<Feature>();
                    for( Object item : ((Iterable<?>) value) ) {
                        if( item instanceof java.lang.String ) {
                            final Feature enumConstant = VdmEnum.getConstant(Feature.class, ((java.lang.String) item));
                            features.add(enumConstant);
                        }
                    }
                    if( !Objects.equals(features, getFeatures()) ) {
                        setFeatures(features);
                    }
                }
            }
        }
        // structured properties
        {
            if( values.containsKey("AddressInfo") ) {
                final Object value = values.remove("AddressInfo");
                if( value instanceof Iterable ) {
                    final LinkedList<Location> addressInfo = new LinkedList<Location>();
                    for( Object properties : ((Iterable<?>) value) ) {
                        if( properties instanceof Map ) {
                            final Location item = new Location();
                            @SuppressWarnings( "unchecked" )
                            final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object>) value);
                            item.fromMap(inputMap);
                            addressInfo.add(item);
                        }
                    }
                    setAddressInfo(addressInfo);
                }
                if( (value == null) && (getAddressInfo() != null) ) {
                    setAddressInfo(null);
                }
            }
            if( values.containsKey("HomeAddress") ) {
                final Object value = values.remove("HomeAddress");
                if( value instanceof Map ) {
                    if( getHomeAddress() == null ) {
                        setHomeAddress(new Location());
                    }
                    @SuppressWarnings( "unchecked" )
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object>) value);
                    getHomeAddress().fromMap(inputMap);
                }
                if( (value == null) && (getHomeAddress() != null) ) {
                    setHomeAddress(null);
                }
            }
        }
        // navigation properties
        {
            if( (values).containsKey("Friends") ) {
                final Object value = (values).remove("Friends");
                if( value instanceof Iterable ) {
                    if( toFriends == null ) {
                        toFriends = Lists.newArrayList();
                    } else {
                        toFriends = Lists.newArrayList(toFriends);
                    }
                    int i = 0;
                    for( Object item : ((Iterable<?>) value) ) {
                        if( !(item instanceof Map) ) {
                            continue;
                        }
                        Person entity;
                        if( toFriends.size() > i ) {
                            entity = toFriends.get(i);
                        } else {
                            entity = new Person();
                            toFriends.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings( "unchecked" )
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object>) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if( (values).containsKey("BestFriend") ) {
                final Object value = (values).remove("BestFriend");
                if( value instanceof Map ) {
                    if( toBestFriend == null ) {
                        toBestFriend = new Person();
                    }
                    @SuppressWarnings( "unchecked" )
                    final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object>) value);
                    toBestFriend.fromMap(inputMap);
                }
            }
            if( (values).containsKey("Trips") ) {
                final Object value = (values).remove("Trips");
                if( value instanceof Iterable ) {
                    if( toTrips == null ) {
                        toTrips = Lists.newArrayList();
                    } else {
                        toTrips = Lists.newArrayList(toTrips);
                    }
                    int i = 0;
                    for( Object item : ((Iterable<?>) value) ) {
                        if( !(item instanceof Map) ) {
                            continue;
                        }
                        Trip entity;
                        if( toTrips.size() > i ) {
                            entity = toTrips.get(i);
                        } else {
                            entity = new Trip();
                            toTrips.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings( "unchecked" )
                        final Map<java.lang.String, Object> inputMap = ((Map<java.lang.String, Object>) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    @Override
    protected java.lang.String getDefaultServicePath()
    {
        return TrippinService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<java.lang.String, Object> toMapOfNavigationProperties()
    {
        final Map<java.lang.String, Object> values = super.toMapOfNavigationProperties();
        if( toFriends != null ) {
            (values).put("Friends", toFriends);
        }
        if( toBestFriend != null ) {
            (values).put("BestFriend", toBestFriend);
        }
        if( toTrips != null ) {
            (values).put("Trips", toTrips);
        }
        return values;
    }

    /**
     * Retrieval of associated <b>Person</b> entities (one to many). This corresponds to the OData navigation property
     * <b>Friends</b>.
     * <p>
     * If the navigation property for an entity <b>Person</b> has not been resolved yet, this method will <b>not
     * query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     *
     * @return If the information for navigation property <b>Friends</b> is already loaded, the result will contain the
     *         <b>Person</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Person>> getFriendsIfPresent()
    {
        return Option.of(toFriends);
    }

    /**
     * Overwrites the list of associated <b>Person</b> entities for the loaded navigation property <b>Friends</b>.
     * <p>
     * If the navigation property <b>Friends</b> of a queried <b>Person</b> is operated lazily, an <b>ODataException</b>
     * can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and
     * persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the
     * first time and it has not yet been loaded, an OData query will be run in order to load the missing information
     * and its result will get cached for future invocations.
     *
     * @param value
     *            List of <b>Person</b> entities.
     */
    public void setFriends( @Nonnull final List<Person> value )
    {
        if( toFriends == null ) {
            toFriends = Lists.newArrayList();
        }
        toFriends.clear();
        toFriends.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Person</b> entities. This corresponds to the OData navigation property
     * <b>Friends</b>.
     * <p>
     * If the navigation property <b>Friends</b> of a queried <b>Person</b> is operated lazily, an <b>ODataException</b>
     * can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and
     * persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the
     * first time and it has not yet been loaded, an OData query will be run in order to load the missing information
     * and its result will get cached for future invocations.
     *
     * @param entity
     *            Array of <b>Person</b> entities.
     */
    public void addFriends( Person... entity )
    {
        if( toFriends == null ) {
            toFriends = Lists.newArrayList();
        }
        toFriends.addAll(Lists.newArrayList(entity));
    }

    /**
     * Retrieval of associated <b>Person</b> entity (one to one). This corresponds to the OData navigation property
     * <b>BestFriend</b>.
     * <p>
     * If the navigation property for an entity <b>Person</b> has not been resolved yet, this method will <b>not
     * query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     *
     * @return If the information for navigation property <b>BestFriend</b> is already loaded, the result will contain
     *         the <b>Person</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is
     *         returned.
     */
    @Nonnull
    public Option<Person> getBestFriendIfPresent()
    {
        return Option.of(toBestFriend);
    }

    /**
     * Overwrites the associated <b>Person</b> entity for the loaded navigation property <b>BestFriend</b>.
     *
     * @param value
     *            New <b>Person</b> entity.
     */
    public void setBestFriend( final Person value )
    {
        toBestFriend = value;
    }

    /**
     * Retrieval of associated <b>Trip</b> entities (one to many). This corresponds to the OData navigation property
     * <b>Trips</b>.
     * <p>
     * If the navigation property for an entity <b>Person</b> has not been resolved yet, this method will <b>not
     * query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     *
     * @return If the information for navigation property <b>Trips</b> is already loaded, the result will contain the
     *         <b>Trip</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<Trip>> getTripsIfPresent()
    {
        return Option.of(toTrips);
    }

    /**
     * Overwrites the list of associated <b>Trip</b> entities for the loaded navigation property <b>Trips</b>.
     * <p>
     * If the navigation property <b>Trips</b> of a queried <b>Person</b> is operated lazily, an <b>ODataException</b>
     * can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and
     * persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the
     * first time and it has not yet been loaded, an OData query will be run in order to load the missing information
     * and its result will get cached for future invocations.
     *
     * @param value
     *            List of <b>Trip</b> entities.
     */
    public void setTrips( @Nonnull final List<Trip> value )
    {
        if( toTrips == null ) {
            toTrips = Lists.newArrayList();
        }
        toTrips.clear();
        toTrips.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>Trip</b> entities. This corresponds to the OData navigation property
     * <b>Trips</b>.
     * <p>
     * If the navigation property <b>Trips</b> of a queried <b>Person</b> is operated lazily, an <b>ODataException</b>
     * can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and
     * persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the
     * first time and it has not yet been loaded, an OData query will be run in order to load the missing information
     * and its result will get cached for future invocations.
     *
     * @param entity
     *            Array of <b>Trip</b> entities.
     */
    public void addTrips( Trip... entity )
    {
        if( toTrips == null ) {
            toTrips = Lists.newArrayList();
        }
        toTrips.addAll(Lists.newArrayList(entity));
    }

    /**
     * Function that can be applied to any entity object of this class.
     * </p>
     *
     * @return Function object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static
        com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingle<Person, Airline>
        getFavoriteAirline()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingle<Person, Airline>(
            Person.class,
            Airline.class,
            "Trippin.GetFavoriteAirline",
            parameters);
    }

    /**
     * Function that can be applied to any entity object of this class.
     * </p>
     *
     * @param userName
     *            Constraints: Not nullable
     *            <p>
     *            Original parameter name from the Odata EDM: <b>userName</b>
     *            </p>
     * @return Function object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static
        com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToCollection<Person, Trip>
        getFriendsTrips( @Nonnull final java.lang.String userName )
    {
        final Map<java.lang.String, Object> parameters = new HashMap<java.lang.String, Object>();
        parameters.put("userName", userName);
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToCollection<Person, Trip>(
            Person.class,
            Trip.class,
            "Trippin.GetFriendsTrips",
            parameters);
    }

    /**
     * Function that can be applied to any entity object of this class.
     * </p>
     *
     * @return Function object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingle<Person, Boolean> isHappy()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingle<Person, Boolean>(
            Person.class,
            Boolean.class,
            "Trippin.IsHappy",
            parameters);
    }

    /**
     * Function that can be applied to any entity object of this class.
     * </p>
     *
     * @param really
     *            Constraints: Nullable
     *            <p>
     *            Original parameter name from the Odata EDM: <b>really</b>
     *            </p>
     * @return Function object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingle<Person, Boolean> isHappy(
        @Nullable final Boolean really )
    {
        final Map<java.lang.String, Object> parameters = new HashMap<java.lang.String, Object>();
        parameters.put("really", really);
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingle<Person, Boolean>(
            Person.class,
            Boolean.class,
            "Trippin.IsHappy",
            parameters);
    }

    /**
     * Function that can be applied to a collection of entities of this class.
     * </p>
     *
     * @return Function object prepared with the given parameters to be applied to a collection of entities of this
     *         class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static
        com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.CollectionToSingle<Person, Boolean>
        areAllFriends()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.CollectionToSingle<Person, Boolean>(
            Person.class,
            Boolean.class,
            "Trippin.AreAllFriends",
            parameters);
    }

    /**
     * Function that can be applied to any entity object of this class.
     * </p>
     *
     * @return Function object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static
        com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingleEntity.Composable<Person, Person>
        worstFriend()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.SingleToSingleEntity.Composable<Person, Person>(
            Person.class,
            Person.class,
            "Trippin.WorstFriend",
            parameters);
    }

    /**
     * Function that can be applied to a collection of entities of this class.
     * </p>
     *
     * @return Function object prepared with the given parameters to be applied to a collection of entities of this
     *         class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static
        com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.CollectionToSingleEntity.Composable<Person, Person>
        mostPopularPerson()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.CollectionToSingleEntity.Composable<Person, Person>(
            Person.class,
            Person.class,
            "Trippin.MostPopularPerson",
            parameters);
    }

    /**
     * Function that can be applied to a collection of entities of this class.
     * </p>
     *
     * @return Function object prepared with the given parameters to be applied to a collection of entities of this
     *         class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyFunction(thisFunction)} API.
     */
    @Nonnull
    public static
        com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.CollectionToCollectionEntity.Composable<Person, Person>
        mostPopularPersons()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundFunction.CollectionToCollectionEntity.Composable<Person, Person>(
            Person.class,
            Person.class,
            "Trippin.MostPopularPersons",
            parameters);
    }

    /**
     * Action that can be applied to any entity object of this class.
     * </p>
     *
     * @param lastName
     *            Constraints: Not nullable
     *            <p>
     *            Original parameter name from the Odata EDM: <b>lastName</b>
     *            </p>
     * @return Action object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyAction(thisAction)} API.
     */
    @Nonnull
    public static com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Boolean> updateLastName(
        @Nonnull final java.lang.String lastName )
    {
        final Map<java.lang.String, Object> parameters = new HashMap<java.lang.String, Object>();
        parameters.put("lastName", lastName);
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Boolean>(
            Person.class,
            Boolean.class,
            "Trippin.UpdateLastName",
            parameters);
    }

    /**
     * Action that can be applied to any entity object of this class.
     * </p>
     *
     * @param tripId
     *            Constraints: Not nullable
     *            <p>
     *            Original parameter name from the Odata EDM: <b>tripId</b>
     *            </p>
     * @param userName
     *            Constraints: Not nullable
     *            <p>
     *            Original parameter name from the Odata EDM: <b>userName</b>
     *            </p>
     * @return Action object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyAction(thisAction)} API.
     */
    @Nonnull
    public static
        com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Void>
        shareTrip( @Nonnull final java.lang.String userName, @Nonnull final Integer tripId )
    {
        final Map<java.lang.String, Object> parameters = new HashMap<java.lang.String, Object>();
        parameters.put("userName", userName);
        parameters.put("tripId", tripId);
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Void>(
            Person.class,
            Void.class,
            "Trippin.ShareTrip",
            parameters);
    }

    /**
     * Action that can be applied to any entity object of this class.
     * </p>
     *
     * @return Action object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyAction(thisAction)} API.
     */
    @Nonnull
    public static com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Void> makeHappy()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Void>(
            Person.class,
            Void.class,
            "Trippin.MakeHappy",
            parameters);
    }

    /**
     * Action that can be applied to any entity object of this class.
     * </p>
     *
     * @param very
     *            Constraints: Nullable
     *            <p>
     *            Original parameter name from the Odata EDM: <b>very</b>
     *            </p>
     * @return Action object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyAction(thisAction)} API.
     */
    @Nonnull
    public static com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Person> makeUnhappy(
        @Nullable final Boolean very )
    {
        final Map<java.lang.String, Object> parameters = new HashMap<java.lang.String, Object>();
        parameters.put("very", very);
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToSingle<Person, Person>(
            Person.class,
            Person.class,
            "Trippin.MakeUnhappy",
            parameters);
    }

    /**
     * Action that can be applied to a collection of entities of this class.
     * </p>
     *
     * @return Action object prepared with the given parameters to be applied to a collection of entities of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyAction(thisAction)} API.
     */
    @Nonnull
    public static com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.CollectionToSingle<Person, Void> makeAllHappy()
    {
        final Map<java.lang.String, Object> parameters = Collections.emptyMap();
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.CollectionToSingle<Person, Void>(
            Person.class,
            Void.class,
            "Trippin.MakeAllHappy",
            parameters);
    }

    /**
     * Action that can be applied to any entity object of this class.
     * </p>
     *
     * @param subject
     *            Constraints: Nullable
     *            <p>
     *            Original parameter name from the Odata EDM: <b>subject</b>
     *            </p>
     * @return Action object prepared with the given parameters to be applied to any entity object of this class.
     *         </p>
     *         To execute it use the {@code service.forEntity(entity).applyAction(thisAction)} API.
     */
    @Nonnull
    public static com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToCollection<Person, Person> sendMail(
        @Nullable final java.lang.String subject )
    {
        final Map<java.lang.String, Object> parameters = new HashMap<java.lang.String, Object>();
        parameters.put("subject", subject);
        return new com.sap.cloud.sdk.datamodel.odatav4.core.BoundAction.SingleToCollection<Person, Person>(
            Person.class,
            Person.class,
            "Trippin.sendMail",
            parameters);
    }

    /**
     * Helper class to allow for fluent creation of Person instances.
     *
     */
    public final static class PersonBuilder
    {

        private List<Person> toFriends = Lists.newArrayList();
        private Person toBestFriend;
        private List<Trip> toTrips = Lists.newArrayList();

        private Person.PersonBuilder toFriends( final List<Person> value )
        {
            toFriends.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>Friends</b> for <b>Person</b> to multiple <b>Person</b>.
         *
         * @param value
         *            The Persons to build this Person with.
         * @return This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Person.PersonBuilder friends( Person... value )
        {
            return toFriends(Lists.newArrayList(value));
        }

        private Person.PersonBuilder toBestFriend( final Person value )
        {
            toBestFriend = value;
            return this;
        }

        /**
         * Navigation property <b>BestFriend</b> for <b>Person</b> to single <b>Person</b>.
         *
         * @param value
         *            The Person to build this Person with.
         * @return This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Person.PersonBuilder bestFriend( final Person value )
        {
            return toBestFriend(value);
        }

        private Person.PersonBuilder toTrips( final List<Trip> value )
        {
            toTrips.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>Trips</b> for <b>Person</b> to multiple <b>Trip</b>.
         *
         * @param value
         *            The Trips to build this Person with.
         * @return This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Person.PersonBuilder trips( Trip... value )
        {
            return toTrips(Lists.newArrayList(value));
        }

    }

}
