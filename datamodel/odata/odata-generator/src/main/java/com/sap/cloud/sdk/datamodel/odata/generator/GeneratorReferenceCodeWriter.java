/*
 * Copyright (c) 2024 SAP SE or an SAP affiliate company. All rights reserved.
 */

package com.sap.cloud.sdk.datamodel.odata.generator;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Properties;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.slf4j.Logger;

import com.sun.codemodel.CodeWriter;
import com.sun.codemodel.JPackage;

import io.vavr.control.Option;

class GeneratorReferenceCodeWriter extends CodeWriter
{
    private static final Logger logger = MessageCollector.getLogger(NamespaceClassGenerator.class);
    private static final String RESOURCE_VERSION = "version.properties";
    private static final String RESOURCE_KEY = "version.sdk";
    private static final String REFERENCE_HEADER =
        "\n/*\n * Generated by OData VDM code generator of SAP Cloud SDK in version %s\n */\n";

    @Nonnull
    private final CodeWriter delegate;

    @Nullable
    private final String generatorReference = loadReference().getOrNull();

    GeneratorReferenceCodeWriter( @Nonnull final CodeWriter codeWriter, final String encoding )
    {
        this.delegate = codeWriter;
        super.encoding = encoding;
    }

    private Option<String> loadReference()
    {
        try(
            InputStream versionResource =
                GeneratorReferenceCodeWriter.class.getClassLoader().getResourceAsStream(RESOURCE_VERSION) ) {
            final Properties prop = new Properties();
            prop.load(versionResource);
            final String generator = prop.getProperty(RESOURCE_KEY);
            return Option.of(generator);
        }
        catch( final IOException e ) {
            logger.error("Failed to load " + RESOURCE_VERSION, e);
        }
        return Option.none();
    }

    @Override
    public OutputStream openBinary( final JPackage pkg, final String fileName )
        throws IOException
    {
        final OutputStream result = delegate.openBinary(pkg, fileName);
        if( generatorReference != null ) {
            final String referenceText = String.format(REFERENCE_HEADER, generatorReference);
            result.write(referenceText.getBytes(StandardCharsets.UTF_8));
        }
        return result;
    }

    @Override
    public void close()
        throws IOException
    {
        delegate.close();
    }
}
