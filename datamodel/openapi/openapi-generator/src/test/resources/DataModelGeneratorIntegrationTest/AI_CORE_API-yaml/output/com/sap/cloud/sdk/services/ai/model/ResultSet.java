/*
 * Copyright (c) 2024 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * AI Core
 * Provides tools to manage your scenarios and workflows in SAP AI Core. Execute pipelines as a batch job, for example to pre-process or train your models, or perform batch inference.  Serve inference requests of trained models. Deploy Ð° trained machine learning model as a web service to serve inference requests with high performance.  Register your own Docker registry, synchronize your AI content from your own git repository, and register your own object store for training data and trained models. 
 *
 * The version of the OpenAPI document: 2.26.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.cloud.sdk.services.ai.model;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sap.cloud.sdk.services.ai.model.ColumnName;
import com.sap.cloud.sdk.services.ai.model.ResultRowItem;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * ResultSet
 */

// CHECKSTYLE:OFF
public class ResultSet 
// CHECKSTYLE:ON
{
  @JsonProperty("header")
  private Set<ColumnName> header;

  @JsonProperty("rows")
  private List<List<ResultRowItem>> rows;

  @JsonAnySetter
  @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();
   /**
   * Get header
   * @return header  The header of this {@link ResultSet} instance.
  **/
  @Nonnull public Set<ColumnName> getHeader() {
    return header;
  }

   /**
   * Set the rows of this {@link ResultSet} instance and return the same instance.
   *
   * @param rows  The rows of this {@link ResultSet}
   * @return The same instance of this {@link ResultSet} class
   */
   @Nonnull public ResultSet rows(@Nonnull final List<List<ResultRowItem>> rows) {
    this.rows = rows;
    return this;
  }
  /**
  * Add one Rows instance to this {@link ResultSet}.
  * @param rowsItem The Rows that should be added
  * @return The same instance of type {@link ResultSet}
  */
  @Nonnull public ResultSet addRowsItem( @Nonnull final List<ResultRowItem> rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Get rows
   * @return rows  The rows of this {@link ResultSet} instance.
  **/
  @Nonnull public List<List<ResultRowItem>> getRows() {
    return rows;
  }

  /**
  * Set the rows of this {@link ResultSet} instance.
  *
  * @param rows  The rows of this {@link ResultSet}
  */
  public void setRows( @Nonnull final List<List<ResultRowItem>> rows) {
    this.rows = rows;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link ResultSet}.
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link ResultSet} instance.
   * @param name  The name of the property
   * @return The value of the property
   * @throws NoSuchElementException  If no property with the given name could be found.
   */
  @Nullable
  public Object getCustomField(@Nonnull final String name) throws NoSuchElementException {
    if( !cloudSdkCustomFields.containsKey(name) ) {
        throw new NoSuchElementException("ResultSet has no field with name '" + name + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Set an unrecognizable property of this {@link ResultSet} instance. If the map previously contained a mapping
   * for the key, the old value is replaced by the specified value.
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField( @Nonnull String customFieldName, @Nullable Object customFieldValue )
  {
      cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }


  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final ResultSet resultSet = (ResultSet) o;
    return Objects.equals(this.cloudSdkCustomFields, resultSet.cloudSdkCustomFields) &&
        Objects.equals(this.header, resultSet.header) &&
        Objects.equals(this.rows, resultSet.rows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, rows, cloudSdkCustomFields);
  }

  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class ResultSet {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    cloudSdkCustomFields.forEach((k,v) -> sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

