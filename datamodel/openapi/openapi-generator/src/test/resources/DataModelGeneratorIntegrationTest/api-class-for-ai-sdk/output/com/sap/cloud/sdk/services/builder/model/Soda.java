/*
 * Copyright (c) 2025 SAP SE or an SAP affiliate company. All rights reserved.
 */

/*
 * Soda Store API
 * API for managing sodas in a soda store
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sap.cloud.sdk.services.builder.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * Soda
 */
// CHECKSTYLE:OFF
public class Soda 
// CHECKSTYLE:ON
{
  @JsonProperty("id")
  private Long id;

  @JsonProperty("name")
  private String name;

  @JsonProperty("brand")
  private String brand;

  @JsonProperty("isAvailable")
  private Boolean isAvailable;

  @JsonProperty("flavor")
  private String flavor;

  @JsonProperty("price")
  private Float price;

  /**
   * Gets or Sets diet
   */
  public enum DietEnum {
    /**
    * The SUGAR option of this Soda
    */
    SUGAR("sugar"),
    
    /**
    * The ZERO option of this Soda
    */
    ZERO("zero"),
    
    /**
    * The LIGHT option of this Soda
    */
    LIGHT("light");

    private String value;

    DietEnum(String value) {
      this.value = value;
    }

    /**
    * Get the value of the enum
    * @return The enum value
    */
    @JsonValue
    @Nonnull public String getValue() {
      return value;
    }

    /**
    * Get the String value of the enum value.
    * @return The enum value as String
    */
    @Override
    @Nonnull public String toString() {
      return String.valueOf(value);
    }

    /**
    * Get the enum value from a String value
    * @param value The String value
    * @return The enum value of type Soda
    */
    @JsonCreator
    @Nullable public static DietEnum fromValue(@Nonnull final String value) {
      for (DietEnum b : DietEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("diet")
  private DietEnum diet;

  @JsonProperty("embedding")
  private float[] embedding;

  @JsonAnySetter
  @JsonAnyGetter
  private final Map<String, Object> cloudSdkCustomFields = new LinkedHashMap<>();

  /**
   * Set the id of this {@link Soda} instance and return the same instance.
   *
   * @param id  The id of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda id( @Nullable final Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id  The id of this {@link Soda} instance.
   */
  @Nonnull
  public Long getId() {
    return id;
  }

  /**
   * Set the id of this {@link Soda} instance.
   *
   * @param id  The id of this {@link Soda}
   */
  public void setId( @Nullable final Long id) {
    this.id = id;
  }

  /**
   * Set the name of this {@link Soda} instance and return the same instance.
   *
   * @param name  The name of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda name( @Nonnull final String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name  The name of this {@link Soda} instance.
   */
  @Nonnull
  public String getName() {
    return name;
  }

  /**
   * Set the name of this {@link Soda} instance.
   *
   * @param name  The name of this {@link Soda}
   */
  public void setName( @Nonnull final String name) {
    this.name = name;
  }

  /**
   * Set the brand of this {@link Soda} instance and return the same instance.
   *
   * @param brand  The brand of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda brand( @Nonnull final String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Get brand
   * @return brand  The brand of this {@link Soda} instance.
   */
  @Nonnull
  public String getBrand() {
    return brand;
  }

  /**
   * Set the brand of this {@link Soda} instance.
   *
   * @param brand  The brand of this {@link Soda}
   */
  public void setBrand( @Nonnull final String brand) {
    this.brand = brand;
  }

  /**
   * Set the isAvailable of this {@link Soda} instance and return the same instance.
   *
   * @param isAvailable  The isAvailable of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda isAvailable( @Nullable final Boolean isAvailable) {
    this.isAvailable = isAvailable;
    return this;
  }

  /**
   * Get isAvailable
   * @return isAvailable  The isAvailable of this {@link Soda} instance.
   */
  @Nonnull
  public Boolean isAvailable() {
    return isAvailable;
  }

  /**
   * Set the isAvailable of this {@link Soda} instance.
   *
   * @param isAvailable  The isAvailable of this {@link Soda}
   */
  public void setIsAvailable( @Nullable final Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }

  /**
   * Set the flavor of this {@link Soda} instance and return the same instance.
   *
   * @param flavor  The flavor of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda flavor( @Nonnull final String flavor) {
    this.flavor = flavor;
    return this;
  }

  /**
   * Get flavor
   * @return flavor  The flavor of this {@link Soda} instance.
   */
  @Nonnull
  public String getFlavor() {
    return flavor;
  }

  /**
   * Set the flavor of this {@link Soda} instance.
   *
   * @param flavor  The flavor of this {@link Soda}
   */
  public void setFlavor( @Nonnull final String flavor) {
    this.flavor = flavor;
  }

  /**
   * Set the price of this {@link Soda} instance and return the same instance.
   *
   * @param price  The price of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda price( @Nonnull final Float price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price  The price of this {@link Soda} instance.
   */
  @Nonnull
  public Float getPrice() {
    return price;
  }

  /**
   * Set the price of this {@link Soda} instance.
   *
   * @param price  The price of this {@link Soda}
   */
  public void setPrice( @Nonnull final Float price) {
    this.price = price;
  }

  /**
   * Set the diet of this {@link Soda} instance and return the same instance.
   *
   * @param diet  The diet of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda diet( @Nullable final DietEnum diet) {
    this.diet = diet;
    return this;
  }

  /**
   * Get diet
   * @return diet  The diet of this {@link Soda} instance.
   */
  @Nullable
  public DietEnum getDiet() {
    return diet;
  }

  /**
   * Set the diet of this {@link Soda} instance.
   *
   * @param diet  The diet of this {@link Soda}
   */
  public void setDiet( @Nullable final DietEnum diet) {
    this.diet = diet;
  }

  /**
   * Set the embedding of this {@link Soda} instance and return the same instance.
   *
   * @param embedding  The embedding of this {@link Soda}
   * @return The same instance of this {@link Soda} class
   */
  @Nonnull public Soda embedding( @Nonnull final float[] embedding) {
    this.embedding = embedding;
    return this;
  }

  /**
   * Get embedding
   * @return embedding  The embedding of this {@link Soda} instance.
   */
  @Nonnull
  public float[] getEmbedding() {
    return embedding;
  }

  /**
   * Set the embedding of this {@link Soda} instance.
   *
   * @param embedding  The embedding of this {@link Soda}
   */
  public void setEmbedding( @Nonnull final float[] embedding) {
    this.embedding = embedding;
  }

  /**
   * Get the names of the unrecognizable properties of the {@link Soda}.
   * @return The set of properties names
   */
  @JsonIgnore
  @Nonnull
  public Set<String> getCustomFieldNames() {
    return cloudSdkCustomFields.keySet();
  }

  /**
   * Get the value of an unrecognizable property of this {@link Soda} instance.
   * @deprecated Use {@link #toMap()} instead.
   * @param name  The name of the property
   * @return The value of the property
   * @throws NoSuchElementException  If no property with the given name could be found.
   */
  @Nullable
  @Deprecated
  public Object getCustomField( @Nonnull final String name ) throws NoSuchElementException {
    if( !cloudSdkCustomFields.containsKey(name) ) {
        throw new NoSuchElementException("Soda has no field with name '" + name + "'.");
    }
    return cloudSdkCustomFields.get(name);
  }

  /**
   * Get the value of all properties of this {@link Soda} instance including unrecognized properties.
   *
   * @return The map of all properties
   */
  @JsonIgnore
  @Nonnull
  public Map<String, Object> toMap()
  {
    final Map<String, Object> declaredFields = new LinkedHashMap<>(cloudSdkCustomFields);
    if( id != null ) declaredFields.put("id", id);
    if( name != null ) declaredFields.put("name", name);
    if( brand != null ) declaredFields.put("brand", brand);
    if( isAvailable != null ) declaredFields.put("isAvailable", isAvailable);
    if( flavor != null ) declaredFields.put("flavor", flavor);
    if( price != null ) declaredFields.put("price", price);
    if( diet != null ) declaredFields.put("diet", diet);
    if( embedding != null ) declaredFields.put("embedding", embedding);
    return declaredFields;
  }

  /**
   * Set an unrecognizable property of this {@link Soda} instance. If the map previously contained a mapping
   * for the key, the old value is replaced by the specified value.
   * @param customFieldName The name of the property
   * @param customFieldValue The value of the property
   */
  @JsonIgnore
  public void setCustomField( @Nonnull String customFieldName, @Nullable Object customFieldValue )
  {
      cloudSdkCustomFields.put(customFieldName, customFieldValue);
  }


  @Override
  public boolean equals(@Nullable final java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final Soda soda = (Soda) o;
    return Objects.equals(this.cloudSdkCustomFields, soda.cloudSdkCustomFields) &&
        Objects.equals(this.id, soda.id) &&
        Objects.equals(this.name, soda.name) &&
        Objects.equals(this.brand, soda.brand) &&
        Objects.equals(this.isAvailable, soda.isAvailable) &&
        Objects.equals(this.flavor, soda.flavor) &&
        Objects.equals(this.price, soda.price) &&
        Objects.equals(this.diet, soda.diet) &&
        Arrays.equals(this.embedding, soda.embedding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, brand, isAvailable, flavor, price, diet, Arrays.hashCode(embedding), cloudSdkCustomFields);
  }

  @Override
  @Nonnull public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("class Soda {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    flavor: ").append(toIndentedString(flavor)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    diet: ").append(toIndentedString(diet)).append("\n");
    sb.append("    embedding: ").append(toIndentedString(embedding)).append("\n");
    cloudSdkCustomFields.forEach((k,v) -> sb.append("    ").append(k).append(": ").append(toIndentedString(v)).append("\n"));
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(final java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

