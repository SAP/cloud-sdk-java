{{#copyrightHeader}}/*
 * {{copyrightHeader}}
 */{{/copyrightHeader}}

package {{package}};

import com.sap.cloud.sdk.services.openapi.core.OpenApiRequestException;
import com.sap.cloud.sdk.services.openapi.core.OpenApiResponse;
import com.sap.cloud.sdk.services.openapi.core.AbstractOpenApiService;
import com.sap.cloud.sdk.services.openapi.apiclient.ApiClient;

{{#imports}}import {{import}};
{{/imports}}

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.nio.charset.StandardCharsets;
import java.net.URI;

import com.fasterxml.jackson.core.type.TypeReference;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

{{^aiSdkConstructor}}import com.sap.cloud.sdk.cloudplatform.connectivity.Destination;
{{/aiSdkConstructor}}
{{#aiSdkConstructor}}import com.sap.ai.sdk.core.AiCoreService;
{{/aiSdkConstructor}}

/**
 * {{appName}} in version {{version}}.
 *
 * {{#appDescription}}{{{appDescription}}}{{/appDescription}}{{^appDescription}}No description provided.{{/appDescription}}
 */{{^isReleased}}
@com.google.common.annotations.Beta{{/isReleased}}
{{#operations}}
public class {{classname}} extends AbstractOpenApiService {
{{^aiSdkConstructor}}
    /**
     * Instantiates this API class to invoke operations on the {{appName}}.
     *
     * @param httpDestination The destination that API should be used with
     */
    public {{classname}}( @Nonnull final Destination httpDestination )
    {
        super(httpDestination);
    }

    /**
     * Instantiates this API class to invoke operations on the {{appName}} based on a given {@link ApiClient}.
     *
     * @param apiClient
     *            ApiClient to invoke the API on
     */
    @com.google.common.annotations.Beta
    public {{classname}}( @Nonnull final ApiClient apiClient )
    {
         super(apiClient);
    }
{{/aiSdkConstructor}}
{{#aiSdkConstructor}}

    /**
     * Instantiates this API class to invoke operations on the {{appName}}
     */
    public {{classname}}()
    {
         super(new AiCoreService().getApiClient());
    }

    /**
     * Instantiates this API class to invoke operations on the {{appName}}
     *
     * @param aiCoreService The configured connectivity instance to AI Core
     */
    public {{classname}}( @Nonnull final AiCoreService aiCoreService )
    {
        super(aiCoreService.getApiClient());
    }
{{/aiSdkConstructor}}

    {{#operation}}{{#hasOptionalParams}}
    /**
     * <p>{{summary}}</p>
     *<p>{{notes}}</p>
    {{#responses}}
     * <p><b>{{code}}</b>{{#message}} - {{.}}{{/message}}
     {{/responses}}
     {{#allParams}}
     * @param {{paramName}} {{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/isContainer}}{{/required}}
     {{#description}}
        {{description}}
     {{/description}}
     {{^description}}
        The value for the parameter {{paramName}}
     {{/description}}
     {{/allParams}}
     {{#returnType}}
     * @return {{.}}
     {{/returnType}}
     {{^returnType}}
     * @return An OpenApiResponse containing the status code of the HttpResponse.
     {{/returnType}}
     * @throws OpenApiRequestException if an error occurs while attempting to invoke the API
     {{#externalDocs}}
     * {{description}}
     * @see <a href="{{url}}">{{summary}} Documentation</a>
     {{/externalDocs}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    {{#vendorExtensions.x-return-nullable}}@Nullable{{/vendorExtensions.x-return-nullable}}{{^vendorExtensions.x-return-nullable}}@Nonnull{{/vendorExtensions.x-return-nullable}}
    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}OpenApiResponse {{/returnType}}{{#vendorExtensions.x-sap-cloud-sdk-operation-name}}{{vendorExtensions.x-sap-cloud-sdk-operation-name}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}{{^vendorExtensions.x-sap-cloud-sdk-operation-name}}{{operationId}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}({{#allParams}} {{#required}}@Nonnull{{/required}}{{^required}}@Nullable{{/required}} final {{#isFile}}{{#useAbstractionForFiles}}{{#collectionFormat}}java.util.Collection<org.springframework.core.io.Resource>{{/collectionFormat}}{{^collectionFormat}}org.springframework.core.io.Resource{{/collectionFormat}}{{/useAbstractionForFiles}}{{^useAbstractionForFiles}}{{{dataType}}}{{/useAbstractionForFiles}}{{/isFile}}{{^isFile}}{{{dataType}}}{{/isFile}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws OpenApiRequestException {
        final Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
        {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) {
            throw new OpenApiRequestException("Missing the required parameter '{{paramName}}' when calling {{#vendorExtensions.x-sap-cloud-sdk-operation-name}}{{vendorExtensions.x-sap-cloud-sdk-operation-name}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}{{^vendorExtensions.x-sap-cloud-sdk-operation-name}}{{operationId}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}");
        }
        {{/required}}{{/allParams}}
        String path = "{{{path}}}";{{#hasPathParams}}
        // alter path and map variables{{#pathParams}}
        path = path.replaceAll("[{]{{baseName}}[}]", {{#collectionFormat}}apiClient.collectionPathParameterToString(ApiClient.CollectionFormat.valueOf("{{{collectionFormat}}}".toUpperCase()), {{{paramName}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}+""{{/collectionFormat}});{{/pathParams}}{{/hasPathParams}}
        final String localVarPath = URI.create(path).toString();

        final Map<String, List<String>> localVarQueryParams = new LinkedHashMap<>();
        final Map<String, List<String>> localVarHeaderParams = new LinkedHashMap<>();
        final Map<String, List<Object>> localVarFormParams = new LinkedHashMap<>();{{#hasQueryParams}}

        {{#queryParams}}{{#isExplode}}{{#hasVars}}{{#vars}}        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap({{#collectionFormat}}ApiClient.CollectionFormat.valueOf("{{{.}}}".toUpperCase(Locale.ROOT)){{/collectionFormat}}{{^collectionFormat}}null{{/collectionFormat}}, "{{baseName}}", {{paramName}}.{{getter}}()));
        {{/vars}}{{/hasVars}}{{^hasVars}}        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap({{#collectionFormat}}ApiClient.CollectionFormat.valueOf("{{{.}}}".toUpperCase(Locale.ROOT)){{/collectionFormat}}{{^collectionFormat}}null{{/collectionFormat}}, "{{baseName}}", {{paramName}}));
        {{/hasVars}}{{/isExplode}}{{^isExplode}}        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap({{#collectionFormat}}ApiClient.CollectionFormat.valueOf("{{{.}}}".toUpperCase(Locale.ROOT)){{/collectionFormat}}{{^collectionFormat}}null{{/collectionFormat}}, "{{baseName}}", {{paramName}}));
        {{/isExplode}}{{/queryParams}}{{/hasQueryParams}}{{#hasHeaderParams}}

        {{#headerParams}}if ({{paramName}} != null)
        localVarHeaderParams.computeIfAbsent("{{baseName}}", k -> new ArrayList<>()).add(apiClient.parameterToString({{paramName}}));{{^-last}}
        {{/-last}}{{/headerParams}}{{/hasHeaderParams}}{{#hasFormParams}}

        {{#formParams}}if ({{paramName}} != null)
        localVarFormParams.computeIfAbsent("{{baseName}}", k -> new ArrayList<>()).add({{#isFile}}{{^collectionFormat}}{{#useAbstractionForFiles}}{{paramName}}{{/useAbstractionForFiles}}{{^useAbstractionForFiles}}new FileSystemResource({{paramName}}){{/useAbstractionForFiles}}{{/collectionFormat}}{{/isFile}}{{#isFile}}{{#collectionFormat}}{{paramName}}.stream(){{^useAbstractionForFiles}}.map(FileSystemResource::new){{/useAbstractionForFiles}}.collect(Collectors.toList()){{/collectionFormat}}{{/isFile}}{{^isFile}}{{paramName}}{{/isFile}});{{^-last}}
        {{/-last}}{{/formParams}}{{/hasFormParams}}

        final String[] localVarAccepts = { {{#hasProduces}}
            {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}
        {{/hasProduces}}};
        final List<String> localVarAccept = apiClient.getHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { {{#hasConsumes}}
            {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
        {{/hasConsumes}}};
        final String localVarContentType = apiClient.getHeaderContentType(localVarContentTypes);

        final String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };

        final TypeReference<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> localVarReturnType = new TypeReference<>() {};
        {{#returnType}}return {{/returnType}}apiClient.invokeAPI(localVarPath, "{{httpMethod}}", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);{{^returnType}}
        return new OpenApiResponse(apiClient);{{/returnType}}
    }

    {{/hasOptionalParams}}
    /**
     * <p>{{summary}}</p>
     * <p>{{notes}}</p>
{{#responses}}     * <p><b>{{code}}</b>{{#message}} - {{message}}{{/message}}
{{/responses}}
{{#requiredParams}}
     * @param {{paramName}}
    {{#description}}
     *      {{description}}
    {{/description}}
    {{^description}}
     *      The value for the parameter {{paramName}}
    {{/description}}
{{/requiredParams}}
{{#returnType}}
     * @return {{returnType}}
{{/returnType}}
{{^returnType}}
     * @return An OpenApiResponse containing the status code of the HttpResponse.
{{/returnType}}
     * @throws OpenApiRequestException if an error occurs while attempting to invoke the API
{{#externalDocs}}
     * {{description}}
     * @see <a href="{{url}}">{{summary}} Documentation</a>
{{/externalDocs}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    {{#isDeprecated}}
    @Deprecated
    {{/isDeprecated}}
    {{#vendorExtensions.x-return-nullable}}@Nullable{{/vendorExtensions.x-return-nullable}}{{^vendorExtensions.x-return-nullable}}@Nonnull{{/vendorExtensions.x-return-nullable}}
    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}OpenApiResponse {{/returnType}}{{#vendorExtensions.x-sap-cloud-sdk-operation-name}}{{vendorExtensions.x-sap-cloud-sdk-operation-name}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}{{^vendorExtensions.x-sap-cloud-sdk-operation-name}}{{operationId}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}({{#requiredParams}} @Nonnull final {{#isFile}}{{#useAbstractionForFiles}}{{#collectionFormat}}java.util.Collection<org.springframework.core.io.Resource>{{/collectionFormat}}{{^collectionFormat}}org.springframework.core.io.Resource{{/collectionFormat}}{{/useAbstractionForFiles}}{{^useAbstractionForFiles}}{{{dataType}}}{{/useAbstractionForFiles}}{{/isFile}}{{^isFile}}{{{dataType}}}{{/isFile}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) throws OpenApiRequestException {
        {{#hasOptionalParams}}
        return {{#vendorExtensions.x-sap-cloud-sdk-operation-name}}{{vendorExtensions.x-sap-cloud-sdk-operation-name}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}{{^vendorExtensions.x-sap-cloud-sdk-operation-name}}{{operationId}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}({{#hasRequiredParams}}{{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}, {{/hasRequiredParams}}{{#optionalParams}}null{{^-last}}, {{/-last}}{{/optionalParams}});
        {{/hasOptionalParams}}
        {{^hasOptionalParams}}
        final Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
        {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) {
            throw new OpenApiRequestException("Missing the required parameter '{{paramName}}' when calling {{#vendorExtensions.x-sap-cloud-sdk-operation-name}}{{vendorExtensions.x-sap-cloud-sdk-operation-name}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}{{^vendorExtensions.x-sap-cloud-sdk-operation-name}}{{operationId}}{{/vendorExtensions.x-sap-cloud-sdk-operation-name}}");
        }
        {{/required}}{{/allParams}}
        String path = "{{{path}}}";{{#hasPathParams}}
        // alter path and map variables{{#pathParams}}
        path = path.replaceAll("[{]{{baseName}}[}]", {{#collectionFormat}}apiClient.collectionPathParameterToString(ApiClient.CollectionFormat.valueOf("{{{collectionFormat}}}".toUpperCase()), {{{paramName}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}+""{{/collectionFormat}});{{/pathParams}}{{/hasPathParams}}
        final String localVarPath = URI.create(path).toString();

        final Map<String, List<String>> localVarQueryParams = new LinkedHashMap<>();
        final Map<String, List<String>> localVarHeaderParams = new LinkedHashMap<>();
        final Map<String, List<Object>> localVarFormParams = new LinkedHashMap<>();{{#hasQueryParams}}

        {{#queryParams}}localVarQueryParams.putAll(apiClient.parameterToMultiValueMap({{#collectionFormat}}ApiClient.CollectionFormat.valueOf("{{{.}}}".toUpperCase(Locale.ROOT)){{/collectionFormat}}{{^collectionFormat}}null{{/collectionFormat}}, "{{baseName}}", {{paramName}}));{{^-last}}
        {{/-last}}{{/queryParams}}{{/hasQueryParams}}{{#hasHeaderParams}}

        {{#headerParams}}if ({{paramName}} != null)
        localVarHeaderParams.computeIfAbsent("{{baseName}}", k -> new ArrayList<>()).add(apiClient.parameterToString({{paramName}}));{{^-last}}
        {{/-last}}{{/headerParams}}{{/hasHeaderParams}}{{#hasFormParams}}

        {{#formParams}}if ({{paramName}} != null)
        localVarFormParams.computeIfAbsent("{{baseName}}", k -> new ArrayList<>()).add({{#isFile}}{{^collectionFormat}}{{#useAbstractionForFiles}}{{paramName}}{{/useAbstractionForFiles}}{{^useAbstractionForFiles}}new FileSystemResource({{paramName}}){{/useAbstractionForFiles}}{{/collectionFormat}}{{/isFile}}{{#isFile}}{{#collectionFormat}}{{paramName}}.stream(){{^useAbstractionForFiles}}.map(FileSystemResource::new){{/useAbstractionForFiles}}.collect(Collectors.toList()){{/collectionFormat}}{{/isFile}}{{^isFile}}{{paramName}}{{/isFile}});{{^-last}}
        {{/-last}}{{/formParams}}{{/hasFormParams}}

        final String[] localVarAccepts = { {{#hasProduces}}
            {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}
        {{/hasProduces}}};
        final List<String> localVarAccept = apiClient.getHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { {{#hasConsumes}}
            {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
        {{/hasConsumes}}};
        final String localVarContentType = apiClient.getHeaderContentType(localVarContentTypes);

        final String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };

        final TypeReference<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> localVarReturnType = new TypeReference<>() {};
        {{#returnType}}return {{/returnType}}apiClient.invokeAPI(localVarPath, "{{httpMethod}}", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);{{^returnType}}
        return new OpenApiResponse(apiClient);{{/returnType}}
        {{/hasOptionalParams}}
    }
    {{/operation}}
}
{{/operations}}
